///<reference path="./jaydata.d.ts" />

/*//////////////////////////////////////////////////////////////////////////////////////
////// Autogenerated by JaySvcUtil.exe http://JayData.org for more info        /////////
//////                      oData  V2  TypeScript                              /////////
//////////////////////////////////////////////////////////////////////////////////////*/


declare module ProtecaModel {
  export class RefParametre extends $data.Entity {
    constructor();
    constructor(initData: { CleParametre?: number; Libelle?: string; LibelleLong?: string; Valeur?: string; NumeroOrdre?: number; CodeGroupe?: string; TypeDeDonnee?: string; LibUnite?: string; });
    CleParametre: number;
    Libelle: string;
    LibelleLong: string;
    Valeur: string;
    NumeroOrdre: number;
    CodeGroupe: string;
    TypeDeDonnee: string;
    LibUnite: string;
    
  }
  
  export class GeoEnsembleElectrique extends $data.Entity {
    constructor();
    constructor(initData: { Id?: number; CleEnsElectrique?: number; Libelle?: string; CleAgence?: number; CleRegion?: number; CleSecteur?: number; EnumStructureCplx?: number; });
    Id: number;
    CleEnsElectrique: number;
    Libelle: string;
    CleAgence: number;
    CleRegion: number;
    CleSecteur: number;
    EnumStructureCplx: number;
    
  }
  
  export class PortionDates extends $data.Entity {
    constructor();
    constructor(initData: { Id?: number; CleEnsElectrique?: number; ClePortion?: number; Libelle?: string; DateEg?: Date; DateEcd?: Date; DateCf?: Date; });
    Id: number;
    CleEnsElectrique: number;
    ClePortion: number;
    Libelle: string;
    DateEg: Date;
    DateEcd: Date;
    DateCf: Date;
    
  }
  
  export class PpEquipement extends $data.Entity {
    constructor();
    constructor(initData: { Id?: number; ClePortion?: number; ClePp?: number; CleEquipement?: number; LibelleEquipement?: string; CleTypeEq?: number; LibelleType?: string; CodeEquipement?: string; LibellePp?: string; });
    Id: number;
    ClePortion: number;
    ClePp: number;
    CleEquipement: number;
    LibelleEquipement: string;
    CleTypeEq: number;
    LibelleType: string;
    CodeEquipement: string;
    LibellePp: string;
    
  }
  
  export class TourneePpEq extends $data.Entity {
    constructor();
    constructor(initData: { Id?: number; CleTournee?: number; LibelleTournee?: string; EnumTypeEval?: number; Libelle?: string; ClePp?: number; CleEquipement?: number; CleSecteur?: number; LibelleSecteur?: string; CleAgence?: number; CleRegion?: number; ClePortion?: number; CleEnsElectrique?: number; NumeroOrdre?: number; });
    Id: number;
    CleTournee: number;
    LibelleTournee: string;
    EnumTypeEval: number;
    Libelle: string;
    ClePp: number;
    CleEquipement: number;
    CleSecteur: number;
    LibelleSecteur: string;
    CleAgence: number;
    CleRegion: number;
    ClePortion: number;
    CleEnsElectrique: number;
    NumeroOrdre: number;
    
  }
  
  export class AlerteDetail extends $data.Entity {
    constructor();
    constructor(initData: { CleRegion?: number; CleAgence?: number; CleSecteur?: number; CleEnsElectrique?: number; ClePortion?: number; LibellePortion?: string; Pk?: string; Libelle?: string; CleAlerte?: number; Date?: Date; Supprime?: boolean; LibelleType?: string; Type?: string; Commentaire?: string; CodeEquipement?: string; });
    CleRegion: number;
    CleAgence: number;
    CleSecteur: number;
    CleEnsElectrique: number;
    ClePortion: number;
    LibellePortion: string;
    Pk: string;
    Libelle: string;
    CleAlerte: number;
    Date: Date;
    Supprime: boolean;
    LibelleType: string;
    Type: string;
    Commentaire: string;
    CodeEquipement: string;
    
  }
  
  export class GeoEnsElecPortion extends $data.Entity {
    constructor();
    constructor(initData: { Id?: number; ClePortion?: number; LibellePortion?: string; LongueurPortion?: string; CleEnsElectrique?: number; LibelleEe?: string; EnumStructureCplx?: number; CleAgence?: number; CleRegion?: number; CleSecteur?: number; NbPp?: number; Code?: string; PortionSupprime?: boolean; });
    Id: number;
    ClePortion: number;
    LibellePortion: string;
    LongueurPortion: string;
    CleEnsElectrique: number;
    LibelleEe: string;
    EnumStructureCplx: number;
    CleAgence: number;
    CleRegion: number;
    CleSecteur: number;
    NbPp: number;
    Code: string;
    PortionSupprime: boolean;
    
  }
  
  export class GeoEnsElecPortionEqPp extends $data.Entity {
    constructor();
    constructor(initData: { Id?: number; ClePortion?: number; LibellePortion?: string; CleEnsElectrique?: number; LibelleEe?: string; EnumStructureCplx?: number; Code?: string; CleAgence?: number; CleRegion?: number; CleSecteur?: number; ClePp?: number; LibellePp?: string; CleEquipement?: number; LibelleEquipement?: string; CodeEquipement?: string; });
    Id: number;
    ClePortion: number;
    LibellePortion: string;
    CleEnsElectrique: number;
    LibelleEe: string;
    EnumStructureCplx: number;
    Code: string;
    CleAgence: number;
    CleRegion: number;
    CleSecteur: number;
    ClePp: number;
    LibellePp: string;
    CleEquipement: number;
    LibelleEquipement: string;
    CodeEquipement: string;
    
  }
  
  export class AnAction extends $data.Entity {
    constructor();
    constructor(initData: { CleAction?: number; CleUtilisateurModification?: number; EnumStatut?: number; CleUtilisateurCreation?: number; CleParametreAction?: number; CleAnalyse?: number; ConstatAnomalie?: string; DateCreation?: Date; DateModification?: Date; EntiteTraitement?: number; Description?: string; Quantite?: number; DateRealisationTravaux?: Date; CommentaireStatut?: string; ProgrammeBudgetaire?: string; TempsTravailGlobalReel?: string; CoutGlobalReel?: string; Commentaire?: string; NumActionPc?: string; DateDebut?: Date; DateCloture?: Date; CleUtilisateurAgent?: number; CleUtilisateurResponsable?: number; Supprime?: boolean; TypeEval?: number; AnAnalyse?: ProtecaModel.AnAnalyse; ParametreAction?: ProtecaModel.ParametreAction; RefEnumValeur?: ProtecaModel.RefEnumValeur; UsrUtilisateur?: ProtecaModel.UsrUtilisateur; UsrUtilisateur1?: ProtecaModel.UsrUtilisateur; PortionIntegriteAnAction?: ProtecaModel.PortionIntegriteAnAction[]; UsrUtilisateurResp?: ProtecaModel.UsrUtilisateur; UsrUtilisateurAgent?: ProtecaModel.UsrUtilisateur; RefEnumValeur1?: ProtecaModel.RefEnumValeur; RefEnumValeur2?: ProtecaModel.RefEnumValeur; });
    CleAction: number;
    CleUtilisateurModification: number;
    EnumStatut: number;
    CleUtilisateurCreation: number;
    CleParametreAction: number;
    CleAnalyse: number;
    ConstatAnomalie: string;
    DateCreation: Date;
    DateModification: Date;
    EntiteTraitement: number;
    Description: string;
    Quantite: number;
    DateRealisationTravaux: Date;
    CommentaireStatut: string;
    ProgrammeBudgetaire: string;
    TempsTravailGlobalReel: string;
    CoutGlobalReel: string;
    Commentaire: string;
    NumActionPc: string;
    DateDebut: Date;
    DateCloture: Date;
    CleUtilisateurAgent: number;
    CleUtilisateurResponsable: number;
    Supprime: boolean;
    TypeEval: number;
    AnAnalyse: ProtecaModel.AnAnalyse;
    ParametreAction: ProtecaModel.ParametreAction;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    UsrUtilisateur: ProtecaModel.UsrUtilisateur;
    UsrUtilisateur1: ProtecaModel.UsrUtilisateur;
    PortionIntegriteAnAction: ProtecaModel.PortionIntegriteAnAction[];
    UsrUtilisateurResp: ProtecaModel.UsrUtilisateur;
    UsrUtilisateurAgent: ProtecaModel.UsrUtilisateur;
    RefEnumValeur1: ProtecaModel.RefEnumValeur;
    RefEnumValeur2: ProtecaModel.RefEnumValeur;
    
  }
  
  export class AnAnalyse extends $data.Entity {
    constructor();
    constructor(initData: { CleAnalyse?: number; CleUtilisateur?: number; EnumEtatPc?: number; DateAnalyse?: Date; Commentaire?: string; DateEdition?: Date; AnAction?: ProtecaModel.AnAction[]; RefEnumValeur?: ProtecaModel.RefEnumValeur; UsrUtilisateur?: ProtecaModel.UsrUtilisateur; });
    CleAnalyse: number;
    CleUtilisateur: number;
    EnumEtatPc: number;
    DateAnalyse: Date;
    Commentaire: string;
    DateEdition: Date;
    AnAction: ProtecaModel.AnAction[];
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    UsrUtilisateur: ProtecaModel.UsrUtilisateur;
    
  }
  
  export class AnAnalyseEe extends ProtecaModel.AnAnalyse {
    constructor();
    constructor(initData: { CleEnsElectrique?: number; DateDebutPeriode?: Date; DateFinPeriode?: Date; RefRapportAction?: string; EnsembleElectrique?: ProtecaModel.EnsembleElectrique; AnAnalyseEeVisite?: ProtecaModel.AnAnalyseEeVisite[]; });
    CleEnsElectrique: number;
    DateDebutPeriode: Date;
    DateFinPeriode: Date;
    RefRapportAction: string;
    EnsembleElectrique: ProtecaModel.EnsembleElectrique;
    AnAnalyseEeVisite: ProtecaModel.AnAnalyseEeVisite[];
    
  }
  
  export class AnAnalyseSerieMesure extends ProtecaModel.AnAnalyse {
    constructor();
    constructor(initData: { CleVisite?: number; Alertes?: ProtecaModel.Alerte[]; Visite?: ProtecaModel.Visite; });
    CleVisite: number;
    Alertes: ProtecaModel.Alerte[];
    Visite: ProtecaModel.Visite;
    
  }
  
  export class CategoriePp extends $data.Entity {
    constructor();
    constructor(initData: { CleCategoriePp?: number; CleTypeEq?: number; CleNiveauSensibilite?: number; Libelle?: string; NonLieAUnEquipement?: boolean; NumeroOrdre?: number; TypeEquipement?: ProtecaModel.TypeEquipement; RefNiveauSensibilitePp?: ProtecaModel.RefNiveauSensibilitePp; HistoPp?: ProtecaModel.HistoPp[]; Pps?: ProtecaModel.Pp[]; PpTmp?: ProtecaModel.PpTmp[]; });
    CleCategoriePp: number;
    CleTypeEq: number;
    CleNiveauSensibilite: number;
    Libelle: string;
    NonLieAUnEquipement: boolean;
    NumeroOrdre: number;
    TypeEquipement: ProtecaModel.TypeEquipement;
    RefNiveauSensibilitePp: ProtecaModel.RefNiveauSensibilitePp;
    HistoPp: ProtecaModel.HistoPp[];
    Pps: ProtecaModel.Pp[];
    PpTmp: ProtecaModel.PpTmp[];
    
  }
  
  export class Composition extends $data.Entity {
    constructor();
    constructor(initData: { CleComposition?: number; CleTournee?: number; ClePp?: number; CleEquipement?: number; ClePortion?: number; CleEnsElectrique?: number; EnumTypeEval?: number; NumeroOrdre?: number; CleEqTmp?: number; EnsembleElectrique?: ProtecaModel.EnsembleElectrique; EqEquipement?: ProtecaModel.EqEquipement; PortionIntegrite?: ProtecaModel.PortionIntegrite; Pp?: ProtecaModel.Pp; RefEnumValeur?: ProtecaModel.RefEnumValeur; Tournee?: ProtecaModel.Tournee; EqEquipementTmp?: ProtecaModel.EqEquipementTmp; });
    CleComposition: number;
    CleTournee: number;
    ClePp: number;
    CleEquipement: number;
    ClePortion: number;
    CleEnsElectrique: number;
    EnumTypeEval: number;
    NumeroOrdre: number;
    CleEqTmp: number;
    EnsembleElectrique: ProtecaModel.EnsembleElectrique;
    EqEquipement: ProtecaModel.EqEquipement;
    PortionIntegrite: ProtecaModel.PortionIntegrite;
    Pp: ProtecaModel.Pp;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    Tournee: ProtecaModel.Tournee;
    EqEquipementTmp: ProtecaModel.EqEquipementTmp;
    
  }
  
  export class EnsembleElectrique extends $data.Entity {
    constructor();
    constructor(initData: { CleEnsElectrique?: number; EnumPeriodicite?: number; EnumStructureCplx?: number; Code?: string; Libelle?: string; LongueurReseau?: string; Commentaire?: string; DateMajCommentaire?: Date; Supprime?: boolean; AnAnalyseEe?: ProtecaModel.AnAnalyseEe[]; Compositions?: ProtecaModel.Composition[]; RefEnumValeur?: ProtecaModel.RefEnumValeur; RefEnumValeur1?: ProtecaModel.RefEnumValeur; LogOuvrage?: ProtecaModel.LogOuvrage[]; PortionIntegrite?: ProtecaModel.PortionIntegrite[]; });
    CleEnsElectrique: number;
    EnumPeriodicite: number;
    EnumStructureCplx: number;
    Code: string;
    Libelle: string;
    LongueurReseau: string;
    Commentaire: string;
    DateMajCommentaire: Date;
    Supprime: boolean;
    AnAnalyseEe: ProtecaModel.AnAnalyseEe[];
    Compositions: ProtecaModel.Composition[];
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    RefEnumValeur1: ProtecaModel.RefEnumValeur;
    LogOuvrage: ProtecaModel.LogOuvrage[];
    PortionIntegrite: ProtecaModel.PortionIntegrite[];
    
  }
  
  export class EqDrainageLiaisonsext extends $data.Entity {
    constructor();
    constructor(initData: { CleDrainageLext?: number; CleLiaisonExt?: number; CleDrainage?: number; EqDrainage?: ProtecaModel.EqDrainage; EqLiaisonExterne?: ProtecaModel.EqLiaisonExterne; });
    CleDrainageLext: number;
    CleLiaisonExt: number;
    CleDrainage: number;
    EqDrainage: ProtecaModel.EqDrainage;
    EqLiaisonExterne: ProtecaModel.EqLiaisonExterne;
    
  }
  
  export class EqEquipement extends $data.Entity {
    constructor();
    constructor(initData: { CleEquipement?: number; CleEquipementOrigine?: number; ClePp?: number; CleTypeEq?: number; CleUtilisateur?: number; Libelle?: string; Commentaire?: string; DateMiseEnService?: Date; Supprime?: boolean; DateMajCommentaire?: Date; DateMajEquipement?: Date; Compositions?: ProtecaModel.Composition[]; UsrUtilisateur?: ProtecaModel.UsrUtilisateur; Pp?: ProtecaModel.Pp; TypeEquipement?: ProtecaModel.TypeEquipement; EqEquipementEqEquipement?: ProtecaModel.EqEquipement[]; EqEquipement2?: ProtecaModel.EqEquipement; EqRaccordIsolant1?: ProtecaModel.EqRaccordIsolant[]; Images?: ProtecaModel.Image[]; LogOuvrage?: ProtecaModel.LogOuvrage[]; MesNiveauProtection?: ProtecaModel.MesNiveauProtection[]; Visites?: ProtecaModel.Visite[]; });
    CleEquipement: number;
    CleEquipementOrigine: number;
    ClePp: number;
    CleTypeEq: number;
    CleUtilisateur: number;
    Libelle: string;
    Commentaire: string;
    DateMiseEnService: Date;
    Supprime: boolean;
    DateMajCommentaire: Date;
    DateMajEquipement: Date;
    Compositions: ProtecaModel.Composition[];
    UsrUtilisateur: ProtecaModel.UsrUtilisateur;
    Pp: ProtecaModel.Pp;
    TypeEquipement: ProtecaModel.TypeEquipement;
    EqEquipementEqEquipement: ProtecaModel.EqEquipement[];
    EqEquipement2: ProtecaModel.EqEquipement;
    EqRaccordIsolant1: ProtecaModel.EqRaccordIsolant[];
    Images: ProtecaModel.Image[];
    LogOuvrage: ProtecaModel.LogOuvrage[];
    MesNiveauProtection: ProtecaModel.MesNiveauProtection[];
    Visites: ProtecaModel.Visite[];
    
  }
  
  export class EqAnodeGalvanique extends ProtecaModel.EqEquipement {
    constructor();
    constructor(initData: { CleTypeAnode?: number; PileAssociee?: boolean; RefSousTypeOuvrage?: ProtecaModel.RefSousTypeOuvrage; });
    CleTypeAnode: number;
    PileAssociee: boolean;
    RefSousTypeOuvrage: ProtecaModel.RefSousTypeOuvrage;
    
  }
  
  export class EqDispoEcoulementCourantsAlternatifs extends ProtecaModel.EqEquipement {
    constructor();
    constructor(initData: { CleTypePriseDeTerre?: number; CapaciteCondensateur?: number; DatePosePriseDeTerre?: Date; ResistanceInitPriseDeTerre?: string; CoordDebPriseTerreLat?: string; CoordDebPriseTerreLong?: string; CoordFinPriseTerreLat?: string; CoordFinPriseTerreLong?: string; DateMiseEnServiceTelemesure?: Date; PresenceTelemesure?: boolean; RefSousTypeOuvrage?: ProtecaModel.RefSousTypeOuvrage; });
    CleTypePriseDeTerre: number;
    CapaciteCondensateur: number;
    DatePosePriseDeTerre: Date;
    ResistanceInitPriseDeTerre: string;
    CoordDebPriseTerreLat: string;
    CoordDebPriseTerreLong: string;
    CoordFinPriseTerreLat: string;
    CoordFinPriseTerreLong: string;
    DateMiseEnServiceTelemesure: Date;
    PresenceTelemesure: boolean;
    RefSousTypeOuvrage: ProtecaModel.RefSousTypeOuvrage;
    
  }
  
  export class EqDrainage extends ProtecaModel.EqEquipement {
    constructor();
    constructor(initData: { CleTypeDrainage?: number; IntensiteMaximaleSupportee?: number; DateMiseEnServiceTelemesure?: Date; PresenceTelemesure?: boolean; EqDrainageLiaisonsext?: ProtecaModel.EqDrainageLiaisonsext[]; RefSousTypeOuvrage?: ProtecaModel.RefSousTypeOuvrage; });
    CleTypeDrainage: number;
    IntensiteMaximaleSupportee: number;
    DateMiseEnServiceTelemesure: Date;
    PresenceTelemesure: boolean;
    EqDrainageLiaisonsext: ProtecaModel.EqDrainageLiaisonsext[];
    RefSousTypeOuvrage: ProtecaModel.RefSousTypeOuvrage;
    
  }
  
  export class EqLiaisonExterne extends ProtecaModel.EqEquipement {
    constructor();
    constructor(initData: { CleTypeLiaison?: number; CleNomTiersAss?: number; PresencePcSurOuvrageTiers?: boolean; ProtectionTiersParUnite?: boolean; TypeFluide?: string; LiaisonTechnique?: boolean; LibelleEquipementTiers?: string; LibellePointCommun?: string; DateMiseEnServiceTelemesure?: Date; PresenceTelemesure?: boolean; EqDrainageLiaisonsext?: ProtecaModel.EqDrainageLiaisonsext[]; RefSousTypeOuvrage?: ProtecaModel.RefSousTypeOuvrage; RefSousTypeOuvrage1?: ProtecaModel.RefSousTypeOuvrage; EqSoutirageLiaisonsext?: ProtecaModel.EqSoutirageLiaisonsext[]; });
    CleTypeLiaison: number;
    CleNomTiersAss: number;
    PresencePcSurOuvrageTiers: boolean;
    ProtectionTiersParUnite: boolean;
    TypeFluide: string;
    LiaisonTechnique: boolean;
    LibelleEquipementTiers: string;
    LibellePointCommun: string;
    DateMiseEnServiceTelemesure: Date;
    PresenceTelemesure: boolean;
    EqDrainageLiaisonsext: ProtecaModel.EqDrainageLiaisonsext[];
    RefSousTypeOuvrage: ProtecaModel.RefSousTypeOuvrage;
    RefSousTypeOuvrage1: ProtecaModel.RefSousTypeOuvrage;
    EqSoutirageLiaisonsext: ProtecaModel.EqSoutirageLiaisonsext[];
    
  }
  
  export class EqRaccordIsolant extends ProtecaModel.EqEquipement {
    constructor();
    constructor(initData: { CleTypeRi?: number; ClePp2?: number; EnumConfigElectNormale?: number; EnumEtatElect?: number; CleLiaison?: number; PresenceEclateur?: boolean; CleTypeLiaison?: number; EqEquipement1?: ProtecaModel.EqEquipement; RefEnumValeur?: ProtecaModel.RefEnumValeur; RefEnumValeur1?: ProtecaModel.RefEnumValeur; Pp2?: ProtecaModel.Pp; RefSousTypeOuvrage?: ProtecaModel.RefSousTypeOuvrage; RefSousTypeOuvrage1?: ProtecaModel.RefSousTypeOuvrage; });
    CleTypeRi: number;
    ClePp2: number;
    EnumConfigElectNormale: number;
    EnumEtatElect: number;
    CleLiaison: number;
    PresenceEclateur: boolean;
    CleTypeLiaison: number;
    EqEquipement1: ProtecaModel.EqEquipement;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    RefEnumValeur1: ProtecaModel.RefEnumValeur;
    Pp2: ProtecaModel.Pp;
    RefSousTypeOuvrage: ProtecaModel.RefSousTypeOuvrage;
    RefSousTypeOuvrage1: ProtecaModel.RefSousTypeOuvrage;
    
  }
  
  export class EqFourreauMetallique extends ProtecaModel.EqEquipement {
    constructor();
    constructor(initData: { ClePp2?: number; Longueur?: number; Pp2?: ProtecaModel.Pp; });
    ClePp2: number;
    Longueur: number;
    Pp2: ProtecaModel.Pp;
    
  }
  
  export class EqLiaisonInterne extends ProtecaModel.EqEquipement {
    constructor();
    constructor(initData: { ClePp2?: number; CleTypeLiaison?: number; CleLiaisonInterEe?: number; LiaisonInterEe?: boolean; LibellePointCommun?: string; DateMiseEnServiceTelemesure?: Date; PresenceTelemesure?: boolean; Pp2?: ProtecaModel.Pp; RefSousTypeOuvrage?: ProtecaModel.RefSousTypeOuvrage; EqLiaisonInterne1?: ProtecaModel.EqLiaisonInterne[]; EqLiaisonInterne2?: ProtecaModel.EqLiaisonInterne; });
    ClePp2: number;
    CleTypeLiaison: number;
    CleLiaisonInterEe: number;
    LiaisonInterEe: boolean;
    LibellePointCommun: string;
    DateMiseEnServiceTelemesure: Date;
    PresenceTelemesure: boolean;
    Pp2: ProtecaModel.Pp;
    RefSousTypeOuvrage: ProtecaModel.RefSousTypeOuvrage;
    EqLiaisonInterne1: ProtecaModel.EqLiaisonInterne[];
    EqLiaisonInterne2: ProtecaModel.EqLiaisonInterne;
    
  }
  
  export class EqPile extends ProtecaModel.EqEquipement {
    constructor();
    constructor(initData: { CleCaracteristiquePile?: number; CleTypeDeversoir?: number; DateRenouvellementDeversoir?: Date; DatePrevisionRenouvellementPile?: Date; NombrePiles?: number; RefEnumValeur?: ProtecaModel.RefEnumValeur; RefSousTypeOuvrage?: ProtecaModel.RefSousTypeOuvrage; });
    CleCaracteristiquePile: number;
    CleTypeDeversoir: number;
    DateRenouvellementDeversoir: Date;
    DatePrevisionRenouvellementPile: Date;
    NombrePiles: number;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    RefSousTypeOuvrage: ProtecaModel.RefSousTypeOuvrage;
    
  }
  
  export class EqSoutirage extends ProtecaModel.EqEquipement {
    constructor();
    constructor(initData: { CleDeversoir?: number; CleRedresseur?: number; Autoregule?: boolean; DateControle?: Date; DateMiseEnServiceRedresseur?: Date; DatePoseDeversoir?: Date; DateRenouvellementDeversoir?: Date; IntensiteReglage?: string; LongueurDeversoir?: string; MasseAuMetreLineaire?: string; PresenceReenclencheur?: boolean; TensionReglage?: number; CoordDebDeversoirLat?: string; CoordDebDeversoirLong?: string; CoordFinDeversoirLat?: string; CoordFinDeversoirLong?: string; DateMiseEnServiceTelemesure?: Date; PresenceTelemesure?: boolean; EqSoutirageLiaisonsext?: ProtecaModel.EqSoutirageLiaisonsext[]; RefSousTypeOuvrage?: ProtecaModel.RefSousTypeOuvrage; RefSousTypeOuvrage1?: ProtecaModel.RefSousTypeOuvrage; });
    CleDeversoir: number;
    CleRedresseur: number;
    Autoregule: boolean;
    DateControle: Date;
    DateMiseEnServiceRedresseur: Date;
    DatePoseDeversoir: Date;
    DateRenouvellementDeversoir: Date;
    IntensiteReglage: string;
    LongueurDeversoir: string;
    MasseAuMetreLineaire: string;
    PresenceReenclencheur: boolean;
    TensionReglage: number;
    CoordDebDeversoirLat: string;
    CoordDebDeversoirLong: string;
    CoordFinDeversoirLat: string;
    CoordFinDeversoirLong: string;
    DateMiseEnServiceTelemesure: Date;
    PresenceTelemesure: boolean;
    EqSoutirageLiaisonsext: ProtecaModel.EqSoutirageLiaisonsext[];
    RefSousTypeOuvrage: ProtecaModel.RefSousTypeOuvrage;
    RefSousTypeOuvrage1: ProtecaModel.RefSousTypeOuvrage;
    
  }
  
  export class EqPostegaz extends ProtecaModel.EqEquipement {
    constructor();
    constructor(initData: { CodePosteGaz?: string; TypePoste?: string; });
    CodePosteGaz: string;
    TypePoste: string;
    
  }
  
  export class EqTiersCroiseSansLiaison extends ProtecaModel.EqEquipement {
    constructor();
    constructor(initData: { NomTiersAssocie?: string; PresencePcSurOuvrageTiers?: boolean; TypeFluide?: string; });
    NomTiersAssocie: string;
    PresencePcSurOuvrageTiers: boolean;
    TypeFluide: string;
    
  }
  
  export class EqEquipementTmp extends $data.Entity {
    constructor();
    constructor(initData: { CleEqTmp?: number; ClePp?: number; CleTypeEq?: number; Libelle?: string; EstValide?: boolean; DateValidation?: Date; Pp2?: ProtecaModel.Pp; TypeEquipement?: ProtecaModel.TypeEquipement; Visites?: ProtecaModel.Visite[]; Compositions?: ProtecaModel.Composition[]; });
    CleEqTmp: number;
    ClePp: number;
    CleTypeEq: number;
    Libelle: string;
    EstValide: boolean;
    DateValidation: Date;
    Pp2: ProtecaModel.Pp;
    TypeEquipement: ProtecaModel.TypeEquipement;
    Visites: ProtecaModel.Visite[];
    Compositions: ProtecaModel.Composition[];
    
  }
  
  export class EqSoutirageLiaisonsext extends $data.Entity {
    constructor();
    constructor(initData: { CleSoutirageLext?: number; CleLiaisonExt?: number; CleSoutirage?: number; EqLiaisonExterne?: ProtecaModel.EqLiaisonExterne; EqSoutirage?: ProtecaModel.EqSoutirage; });
    CleSoutirageLext: number;
    CleLiaisonExt: number;
    CleSoutirage: number;
    EqLiaisonExterne: ProtecaModel.EqLiaisonExterne;
    EqSoutirage: ProtecaModel.EqSoutirage;
    
  }
  
  export class GeoAgence extends $data.Entity {
    constructor();
    constructor(initData: { CleAgence?: number; CleRegion?: number; LibelleAgence?: string; LibelleAbregeAgence?: string; CodeAgence?: string; GeoRegion?: ProtecaModel.GeoRegion; GeoSecteur?: ProtecaModel.GeoSecteur[]; InsInstrument?: ProtecaModel.InsInstrument[]; UsrUtilisateur?: ProtecaModel.UsrUtilisateur[]; });
    CleAgence: number;
    CleRegion: number;
    LibelleAgence: string;
    LibelleAbregeAgence: string;
    CodeAgence: string;
    GeoRegion: ProtecaModel.GeoRegion;
    GeoSecteur: ProtecaModel.GeoSecteur[];
    InsInstrument: ProtecaModel.InsInstrument[];
    UsrUtilisateur: ProtecaModel.UsrUtilisateur[];
    
  }
  
  export class GeoRegion extends $data.Entity {
    constructor();
    constructor(initData: { CleRegion?: number; LibelleRegion?: string; CodeRegion?: string; LibelleAbregeRegion?: string; GeoAgence?: ProtecaModel.GeoAgence[]; InsInstrument?: ProtecaModel.InsInstrument[]; });
    CleRegion: number;
    LibelleRegion: string;
    CodeRegion: string;
    LibelleAbregeRegion: string;
    GeoAgence: ProtecaModel.GeoAgence[];
    InsInstrument: ProtecaModel.InsInstrument[];
    
  }
  
  export class GeoSecteur extends $data.Entity {
    constructor();
    constructor(initData: { CleSecteur?: number; CleAgence?: number; LibelleSecteur?: string; LibelleAbregeSecteur?: string; CodeSecteur?: string; GeoAgence?: ProtecaModel.GeoAgence; InsInstrument?: ProtecaModel.InsInstrument[]; PiSecteurs?: ProtecaModel.PiSecteurs[]; Pps?: ProtecaModel.Pp[]; UsrUtilisateur?: ProtecaModel.UsrUtilisateur[]; });
    CleSecteur: number;
    CleAgence: number;
    LibelleSecteur: string;
    LibelleAbregeSecteur: string;
    CodeSecteur: string;
    GeoAgence: ProtecaModel.GeoAgence;
    InsInstrument: ProtecaModel.InsInstrument[];
    PiSecteurs: ProtecaModel.PiSecteurs[];
    Pps: ProtecaModel.Pp[];
    UsrUtilisateur: ProtecaModel.UsrUtilisateur[];
    
  }
  
  export class HistoAdmin extends $data.Entity {
    constructor();
    constructor(initData: { CleHistoAdmin?: number; EnumTypeModification?: number; IdConnecte?: string; NomConnecte?: string; PrenomConnecte?: string; IdUtilisateur?: string; NomUtilisateur?: string; PrenomUtilisateur?: string; TypeCompte?: string; DateModification?: Date; RefEnumValeur?: ProtecaModel.RefEnumValeur; });
    CleHistoAdmin: number;
    EnumTypeModification: number;
    IdConnecte: string;
    NomConnecte: string;
    PrenomConnecte: string;
    IdUtilisateur: string;
    NomUtilisateur: string;
    PrenomUtilisateur: string;
    TypeCompte: string;
    DateModification: Date;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    
  }
  
  export class HistoEquipement extends $data.Entity {
    constructor();
    constructor(initData: { CleHistoEquipement?: number; CleTypeEq?: number; CleLogOuvrage?: number; LibellePp?: string; LibellePortion?: string; Libelle?: string; Commentaire?: string; DateMiseEnService?: Date; Supprime?: boolean; DateMajCommentaire?: Date; DateMajEquipement?: Date; LogOuvrage?: ProtecaModel.LogOuvrage; TypeEquipement?: ProtecaModel.TypeEquipement; LogOuvrage1?: ProtecaModel.LogOuvrage[]; });
    CleHistoEquipement: number;
    CleTypeEq: number;
    CleLogOuvrage: number;
    LibellePp: string;
    LibellePortion: string;
    Libelle: string;
    Commentaire: string;
    DateMiseEnService: Date;
    Supprime: boolean;
    DateMajCommentaire: Date;
    DateMajEquipement: Date;
    LogOuvrage: ProtecaModel.LogOuvrage;
    TypeEquipement: ProtecaModel.TypeEquipement;
    LogOuvrage1: ProtecaModel.LogOuvrage[];
    
  }
  
  export class HistoEqAnodeGalvanique extends ProtecaModel.HistoEquipement {
    constructor();
    constructor(initData: { CleTypeAnode?: number; PileAssociee?: boolean; RefSousTypeOuvrage?: ProtecaModel.RefSousTypeOuvrage; });
    CleTypeAnode: number;
    PileAssociee: boolean;
    RefSousTypeOuvrage: ProtecaModel.RefSousTypeOuvrage;
    
  }
  
  export class HistoEqDispoEcoulementCourantsAlternatifs extends ProtecaModel.HistoEquipement {
    constructor();
    constructor(initData: { CleTypePriseDeTerre?: number; CapaciteCondensateur?: number; DatePosePriseDeTerre?: Date; ResistanceInitPriseDeTerre?: string; CoordDebPriseTerreLat?: string; CoordDebPriseTerreLong?: string; CoordFinPriseTerreLat?: string; CoordFinPriseTerreLong?: string; DateMiseEnServiceTelemesure?: Date; PresenceTelemesure?: boolean; RefSousTypeOuvrage?: ProtecaModel.RefSousTypeOuvrage; });
    CleTypePriseDeTerre: number;
    CapaciteCondensateur: number;
    DatePosePriseDeTerre: Date;
    ResistanceInitPriseDeTerre: string;
    CoordDebPriseTerreLat: string;
    CoordDebPriseTerreLong: string;
    CoordFinPriseTerreLat: string;
    CoordFinPriseTerreLong: string;
    DateMiseEnServiceTelemesure: Date;
    PresenceTelemesure: boolean;
    RefSousTypeOuvrage: ProtecaModel.RefSousTypeOuvrage;
    
  }
  
  export class HistoEqDrainage extends ProtecaModel.HistoEquipement {
    constructor();
    constructor(initData: { CleTypeDrainage?: number; IntensiteMaximaleSupportee?: number; DateMiseEnServiceTelemesure?: Date; PresenceTelemesure?: boolean; RefSousTypeOuvrage?: ProtecaModel.RefSousTypeOuvrage; });
    CleTypeDrainage: number;
    IntensiteMaximaleSupportee: number;
    DateMiseEnServiceTelemesure: Date;
    PresenceTelemesure: boolean;
    RefSousTypeOuvrage: ProtecaModel.RefSousTypeOuvrage;
    
  }
  
  export class HistoEqLiaisonExterne extends ProtecaModel.HistoEquipement {
    constructor();
    constructor(initData: { CleTypeLiaison?: number; PresencePcSurOuvrageTiers?: boolean; ProtectionTiersParUnite?: boolean; TypeFluide?: string; LiaisonTechnique?: boolean; LibelleEquipementTiers?: string; NomTiers?: string; LibellePointCommun?: string; DateMiseEnServiceTelemesure?: Date; PresenceTelemesure?: boolean; RefSousTypeOuvrage?: ProtecaModel.RefSousTypeOuvrage; });
    CleTypeLiaison: number;
    PresencePcSurOuvrageTiers: boolean;
    ProtectionTiersParUnite: boolean;
    TypeFluide: string;
    LiaisonTechnique: boolean;
    LibelleEquipementTiers: string;
    NomTiers: string;
    LibellePointCommun: string;
    DateMiseEnServiceTelemesure: Date;
    PresenceTelemesure: boolean;
    RefSousTypeOuvrage: ProtecaModel.RefSousTypeOuvrage;
    
  }
  
  export class HistoEqLiaisonInterne extends ProtecaModel.HistoEquipement {
    constructor();
    constructor(initData: { CleTypeLiaison?: number; LiaisonInterEe?: boolean; LibellePp2?: string; LibellePortionPp2?: string; LibellePointCommun?: string; DateMiseEnServiceTelemesure?: Date; PresenceTelemesure?: boolean; LibelleDoublonInterEe?: string; RefSousTypeOuvrage?: ProtecaModel.RefSousTypeOuvrage; });
    CleTypeLiaison: number;
    LiaisonInterEe: boolean;
    LibellePp2: string;
    LibellePortionPp2: string;
    LibellePointCommun: string;
    DateMiseEnServiceTelemesure: Date;
    PresenceTelemesure: boolean;
    LibelleDoublonInterEe: string;
    RefSousTypeOuvrage: ProtecaModel.RefSousTypeOuvrage;
    
  }
  
  export class HistoEqPile extends ProtecaModel.HistoEquipement {
    constructor();
    constructor(initData: { CleTypeDeversoir?: number; CleCaracteristiquePile?: number; DatePrevisionRenouvellementPile?: Date; DateRenouvellementDeversoir?: Date; NombrePiles?: number; RefEnumValeur?: ProtecaModel.RefEnumValeur; RefSousTypeOuvrage?: ProtecaModel.RefSousTypeOuvrage; });
    CleTypeDeversoir: number;
    CleCaracteristiquePile: number;
    DatePrevisionRenouvellementPile: Date;
    DateRenouvellementDeversoir: Date;
    NombrePiles: number;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    RefSousTypeOuvrage: ProtecaModel.RefSousTypeOuvrage;
    
  }
  
  export class HistoEqRaccordIsolant extends ProtecaModel.HistoEquipement {
    constructor();
    constructor(initData: { EnumEtatElect?: number; CleTypeRi?: number; CleTypeLiaison?: number; EnumConfigElectNormale?: number; PresenceEclateur?: boolean; LibelleLiaison?: string; LibellePp2?: string; LibellePortionPp2?: string; RefEnumValeur?: ProtecaModel.RefEnumValeur; RefEnumValeur1?: ProtecaModel.RefEnumValeur; RefSousTypeOuvrage?: ProtecaModel.RefSousTypeOuvrage; RefSousTypeOuvrage1?: ProtecaModel.RefSousTypeOuvrage; });
    EnumEtatElect: number;
    CleTypeRi: number;
    CleTypeLiaison: number;
    EnumConfigElectNormale: number;
    PresenceEclateur: boolean;
    LibelleLiaison: string;
    LibellePp2: string;
    LibellePortionPp2: string;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    RefEnumValeur1: ProtecaModel.RefEnumValeur;
    RefSousTypeOuvrage: ProtecaModel.RefSousTypeOuvrage;
    RefSousTypeOuvrage1: ProtecaModel.RefSousTypeOuvrage;
    
  }
  
  export class HistoEqSoutirage extends ProtecaModel.HistoEquipement {
    constructor();
    constructor(initData: { TypeDeversoir?: number; Autoregule?: boolean; DateControle?: Date; DateMiseEnServiceRedresseur?: Date; DatePoseDeversoir?: Date; DateRenouvellementDeversoir?: Date; IntensiteReglage?: string; LongueurDeversoir?: string; MasseAuMetreLineaire?: string; PresenceReenclencheur?: boolean; TensionReglage?: number; CoordDebDeversoirLat?: string; CoordDebDeversoirLong?: string; CoordFinDeversoirLat?: string; CoordFinDeversoirLong?: string; TypeRedresseur?: string; DateMiseEnServiceTelemesure?: Date; PresenceTelemesure?: boolean; RefSousTypeOuvrage?: ProtecaModel.RefSousTypeOuvrage; });
    TypeDeversoir: number;
    Autoregule: boolean;
    DateControle: Date;
    DateMiseEnServiceRedresseur: Date;
    DatePoseDeversoir: Date;
    DateRenouvellementDeversoir: Date;
    IntensiteReglage: string;
    LongueurDeversoir: string;
    MasseAuMetreLineaire: string;
    PresenceReenclencheur: boolean;
    TensionReglage: number;
    CoordDebDeversoirLat: string;
    CoordDebDeversoirLong: string;
    CoordFinDeversoirLat: string;
    CoordFinDeversoirLong: string;
    TypeRedresseur: string;
    DateMiseEnServiceTelemesure: Date;
    PresenceTelemesure: boolean;
    RefSousTypeOuvrage: ProtecaModel.RefSousTypeOuvrage;
    
  }
  
  export class HistoEqFourreauMetallique extends ProtecaModel.HistoEquipement {
    constructor();
    constructor(initData: { Longueur?: string; LibellePp2?: string; LibellePortionPp2?: string; });
    Longueur: string;
    LibellePp2: string;
    LibellePortionPp2: string;
    
  }
  
  export class HistoEqPostegaz extends ProtecaModel.HistoEquipement {
    constructor();
    constructor(initData: { CodePosteGaz?: string; TypePoste?: string; });
    CodePosteGaz: string;
    TypePoste: string;
    
  }
  
  export class HistoEqTiersCroiseSansLiaison extends ProtecaModel.HistoEquipement {
    constructor();
    constructor(initData: { NomTiersAssocie?: string; PresencePcSurOuvrageTiers?: boolean; TypeFluide?: string; });
    NomTiersAssocie: string;
    PresencePcSurOuvrageTiers: boolean;
    TypeFluide: string;
    
  }
  
  export class HistoPp extends $data.Entity {
    constructor();
    constructor(initData: { CleHistoPp?: number; CleCommune?: number; CleLogOuvrage?: number; CleCategoriePp?: number; CleNiveauSensibilite?: number; EnumSurfaceTme?: number; EnumSurfaceTms?: number; EnumDureeEnrg?: number; EnumPolarisation?: number; Libelle?: string; LibellePortion?: string; Pk?: string; Commentaire?: string; DateMajCommentaire?: Date; PositionnementPostal?: string; CommentairePositionnement?: string; CourantsVagabonds?: boolean; CourantsAlternatifsInduits?: boolean; ElectrodeEnterreeAmovible?: boolean; TemoinEnterreAmovible?: boolean; TemoinMetalliqueDeSurface?: boolean; PositionGpsLat?: string; PositionGpsLong?: string; CoordonneeGpsFiabilisee?: boolean; DateMiseEnService?: Date; PresenceTelemesure?: boolean; DateMiseEnServiceTelemesure?: Date; PpPoste?: boolean; Supprime?: boolean; DateMajPp?: Date; CategoriePp?: ProtecaModel.CategoriePp; RefEnumValeur?: ProtecaModel.RefEnumValeur; RefCommune?: ProtecaModel.RefCommune; RefEnumValeur1?: ProtecaModel.RefEnumValeur; RefNiveauSensibilitePp?: ProtecaModel.RefNiveauSensibilitePp; LogOuvrage?: ProtecaModel.LogOuvrage; RefEnumValeur2?: ProtecaModel.RefEnumValeur; RefEnumValeur3?: ProtecaModel.RefEnumValeur; LogOuvrage1?: ProtecaModel.LogOuvrage[]; });
    CleHistoPp: number;
    CleCommune: number;
    CleLogOuvrage: number;
    CleCategoriePp: number;
    CleNiveauSensibilite: number;
    EnumSurfaceTme: number;
    EnumSurfaceTms: number;
    EnumDureeEnrg: number;
    EnumPolarisation: number;
    Libelle: string;
    LibellePortion: string;
    Pk: string;
    Commentaire: string;
    DateMajCommentaire: Date;
    PositionnementPostal: string;
    CommentairePositionnement: string;
    CourantsVagabonds: boolean;
    CourantsAlternatifsInduits: boolean;
    ElectrodeEnterreeAmovible: boolean;
    TemoinEnterreAmovible: boolean;
    TemoinMetalliqueDeSurface: boolean;
    PositionGpsLat: string;
    PositionGpsLong: string;
    CoordonneeGpsFiabilisee: boolean;
    DateMiseEnService: Date;
    PresenceTelemesure: boolean;
    DateMiseEnServiceTelemesure: Date;
    PpPoste: boolean;
    Supprime: boolean;
    DateMajPp: Date;
    CategoriePp: ProtecaModel.CategoriePp;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    RefCommune: ProtecaModel.RefCommune;
    RefEnumValeur1: ProtecaModel.RefEnumValeur;
    RefNiveauSensibilitePp: ProtecaModel.RefNiveauSensibilitePp;
    LogOuvrage: ProtecaModel.LogOuvrage;
    RefEnumValeur2: ProtecaModel.RefEnumValeur;
    RefEnumValeur3: ProtecaModel.RefEnumValeur;
    LogOuvrage1: ProtecaModel.LogOuvrage[];
    
  }
  
  export class Image extends $data.Entity {
    constructor();
    constructor(initData: { CleImage?: number; CleEquipement?: number; ClePp?: number; EnumTypeImage?: number; Image1?: Uint8Array; EqEquipement?: ProtecaModel.EqEquipement; Pp?: ProtecaModel.Pp; RefEnumValeur?: ProtecaModel.RefEnumValeur; });
    CleImage: number;
    CleEquipement: number;
    ClePp: number;
    EnumTypeImage: number;
    Image1: Uint8Array;
    EqEquipement: ProtecaModel.EqEquipement;
    Pp: ProtecaModel.Pp;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    
  }
  
  export class InsInstrument extends $data.Entity {
    constructor();
    constructor(initData: { CleInstrument?: number; CleSecteur?: number; CleAgence?: number; CleRegion?: number; Libelle?: string; Supprime?: boolean; GeoAgence?: ProtecaModel.GeoAgence; GeoRegion?: ProtecaModel.GeoRegion; GeoSecteur?: ProtecaModel.GeoSecteur; InstrumentsUtilises?: ProtecaModel.InstrumentsUtilises[]; });
    CleInstrument: number;
    CleSecteur: number;
    CleAgence: number;
    CleRegion: number;
    Libelle: string;
    Supprime: boolean;
    GeoAgence: ProtecaModel.GeoAgence;
    GeoRegion: ProtecaModel.GeoRegion;
    GeoSecteur: ProtecaModel.GeoSecteur;
    InstrumentsUtilises: ProtecaModel.InstrumentsUtilises[];
    
  }
  
  export class InstrumentsUtilises extends $data.Entity {
    constructor();
    constructor(initData: { CleInsUtilises?: number; CleInstrument?: number; CleVisite?: number; InsInstrument?: ProtecaModel.InsInstrument; Visite?: ProtecaModel.Visite; });
    CleInsUtilises: number;
    CleInstrument: number;
    CleVisite: number;
    InsInstrument: ProtecaModel.InsInstrument;
    Visite: ProtecaModel.Visite;
    
  }
  
  export class LogOuvrage extends $data.Entity {
    constructor();
    constructor(initData: { CleLogOuvrage?: number; CleEnsElectrique?: number; ClePortion?: number; CleEquipement?: number; ClePp?: number; CleUtilisateur?: number; CleHistoEquipement?: number; CleHistoPp?: number; EnumTypeModification?: number; ListeChamps?: string; DateHistorisation?: Date; EnsembleElectrique?: ProtecaModel.EnsembleElectrique; EqEquipement?: ProtecaModel.EqEquipement; HistoEquipement?: ProtecaModel.HistoEquipement[]; HistoEquipement1?: ProtecaModel.HistoEquipement; HistoPp?: ProtecaModel.HistoPp[]; HistoPp1?: ProtecaModel.HistoPp; PortionIntegrite?: ProtecaModel.PortionIntegrite; Pp?: ProtecaModel.Pp; RefEnumValeur?: ProtecaModel.RefEnumValeur; UsrUtilisateur?: ProtecaModel.UsrUtilisateur; });
    CleLogOuvrage: number;
    CleEnsElectrique: number;
    ClePortion: number;
    CleEquipement: number;
    ClePp: number;
    CleUtilisateur: number;
    CleHistoEquipement: number;
    CleHistoPp: number;
    EnumTypeModification: number;
    ListeChamps: string;
    DateHistorisation: Date;
    EnsembleElectrique: ProtecaModel.EnsembleElectrique;
    EqEquipement: ProtecaModel.EqEquipement;
    HistoEquipement: ProtecaModel.HistoEquipement[];
    HistoEquipement1: ProtecaModel.HistoEquipement;
    HistoPp: ProtecaModel.HistoPp[];
    HistoPp1: ProtecaModel.HistoPp;
    PortionIntegrite: ProtecaModel.PortionIntegrite;
    Pp: ProtecaModel.Pp;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    UsrUtilisateur: ProtecaModel.UsrUtilisateur;
    
  }
  
  export class MesClassementMesure extends $data.Entity {
    constructor();
    constructor(initData: { CleClassementMesure?: number; CleTypeMesure?: number; CourantsVagabons?: boolean; CourantsAlternatifsInduits?: boolean; ElectrodeEnterreeAmovible?: boolean; TemoinEnterre?: boolean; TemoinDeSurface?: boolean; Telemesure?: boolean; MesTypeMesure?: ProtecaModel.MesTypeMesure; });
    CleClassementMesure: number;
    CleTypeMesure: number;
    CourantsVagabons: boolean;
    CourantsAlternatifsInduits: boolean;
    ElectrodeEnterreeAmovible: boolean;
    TemoinEnterre: boolean;
    TemoinDeSurface: boolean;
    Telemesure: boolean;
    MesTypeMesure: ProtecaModel.MesTypeMesure;
    
  }
  
  export class MesCoutMesure extends $data.Entity {
    constructor();
    constructor(initData: { CleCoutMesure?: number; EnumDureeEnregistrement?: number; EnumTempsPolarisation?: number; EnumTypeEval?: number; CleTypeEq?: number; Temps?: string; Cout?: string; RefEnumValeur?: ProtecaModel.RefEnumValeur; TypeEquipement?: ProtecaModel.TypeEquipement; RefEnumValeur1?: ProtecaModel.RefEnumValeur; RefEnumValeur2?: ProtecaModel.RefEnumValeur; });
    CleCoutMesure: number;
    EnumDureeEnregistrement: number;
    EnumTempsPolarisation: number;
    EnumTypeEval: number;
    CleTypeEq: number;
    Temps: string;
    Cout: string;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    TypeEquipement: ProtecaModel.TypeEquipement;
    RefEnumValeur1: ProtecaModel.RefEnumValeur;
    RefEnumValeur2: ProtecaModel.RefEnumValeur;
    
  }
  
  export class MesModeleMesure extends $data.Entity {
    constructor();
    constructor(initData: { CleModeleMesure?: number; CleUnite?: number; CleTypeEq?: number; EnumTypeGraphique?: number; Libelle?: string; LibGenerique?: string; NumeroOrdre?: number; MesurePositive?: boolean; MesUnite?: ProtecaModel.MesUnite; TypeEquipement?: ProtecaModel.TypeEquipement; RefEnumValeur?: ProtecaModel.RefEnumValeur; MesNiveauProtection?: ProtecaModel.MesNiveauProtection[]; MesTypeMesure?: ProtecaModel.MesTypeMesure[]; });
    CleModeleMesure: number;
    CleUnite: number;
    CleTypeEq: number;
    EnumTypeGraphique: number;
    Libelle: string;
    LibGenerique: string;
    NumeroOrdre: number;
    MesurePositive: boolean;
    MesUnite: ProtecaModel.MesUnite;
    TypeEquipement: ProtecaModel.TypeEquipement;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    MesNiveauProtection: ProtecaModel.MesNiveauProtection[];
    MesTypeMesure: ProtecaModel.MesTypeMesure[];
    
  }
  
  export class MesNiveauProtection extends $data.Entity {
    constructor();
    constructor(initData: { CleNiveauProtection?: number; CleModeleMesure?: number; ClePortion?: number; ClePp?: number; CleEquipement?: number; SeuilMini?: string; SeuilMaxi?: string; EqEquipement?: ProtecaModel.EqEquipement; MesModeleMesure?: ProtecaModel.MesModeleMesure; PortionIntegrite?: ProtecaModel.PortionIntegrite; Pp?: ProtecaModel.Pp; });
    CleNiveauProtection: number;
    CleModeleMesure: number;
    ClePortion: number;
    ClePp: number;
    CleEquipement: number;
    SeuilMini: string;
    SeuilMaxi: string;
    EqEquipement: ProtecaModel.EqEquipement;
    MesModeleMesure: ProtecaModel.MesModeleMesure;
    PortionIntegrite: ProtecaModel.PortionIntegrite;
    Pp: ProtecaModel.Pp;
    
  }
  
  export class MesTypeMesure extends $data.Entity {
    constructor();
    constructor(initData: { CleTypeMesure?: number; TypeEvaluation?: number; NiveauType?: number; CleModeleMesure?: number; LibTypeMesure?: string; LibNivAutre?: string; MesureEnService?: boolean; MesureComplementaire?: boolean; NumeroOrdre?: number; MesClassementMesure?: ProtecaModel.MesClassementMesure[]; MesModeleMesure?: ProtecaModel.MesModeleMesure; RefEnumValeur?: ProtecaModel.RefEnumValeur; RefEnumValeur1?: ProtecaModel.RefEnumValeur; MesMesure?: ProtecaModel.MesMesure[]; });
    CleTypeMesure: number;
    TypeEvaluation: number;
    NiveauType: number;
    CleModeleMesure: number;
    LibTypeMesure: string;
    LibNivAutre: string;
    MesureEnService: boolean;
    MesureComplementaire: boolean;
    NumeroOrdre: number;
    MesClassementMesure: ProtecaModel.MesClassementMesure[];
    MesModeleMesure: ProtecaModel.MesModeleMesure;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    RefEnumValeur1: ProtecaModel.RefEnumValeur;
    MesMesure: ProtecaModel.MesMesure[];
    
  }
  
  export class MesUnite extends $data.Entity {
    constructor();
    constructor(initData: { CleUnite?: number; TypeDonnee?: number; Libelle?: string; Symbole?: string; NombreDeDecimales?: number; MesModeleMesure?: ProtecaModel.MesModeleMesure[]; RefEnumValeur?: ProtecaModel.RefEnumValeur; });
    CleUnite: number;
    TypeDonnee: number;
    Libelle: string;
    Symbole: string;
    NombreDeDecimales: number;
    MesModeleMesure: ProtecaModel.MesModeleMesure[];
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    
  }
  
  export class ParametreAction extends $data.Entity {
    constructor();
    constructor(initData: { CleParametreAction?: number; EnumTypeAction?: number; EnumCategorieAnomalie?: number; EnumPriorite?: number; EnumDelaiRealisation?: number; Temps?: string; Cout?: string; Codification?: string; RefEnumValeur?: ProtecaModel.RefEnumValeur; RefEnumValeur1?: ProtecaModel.RefEnumValeur; RefEnumValeur2?: ProtecaModel.RefEnumValeur; RefEnumValeur3?: ProtecaModel.RefEnumValeur; });
    CleParametreAction: number;
    EnumTypeAction: number;
    EnumCategorieAnomalie: number;
    EnumPriorite: number;
    EnumDelaiRealisation: number;
    Temps: string;
    Cout: string;
    Codification: string;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    RefEnumValeur1: ProtecaModel.RefEnumValeur;
    RefEnumValeur2: ProtecaModel.RefEnumValeur;
    RefEnumValeur3: ProtecaModel.RefEnumValeur;
    
  }
  
  export class PiSecteurs extends $data.Entity {
    constructor();
    constructor(initData: { ClePortionSecteurs?: number; CleSecteur?: number; ClePortion?: number; GeoSecteur?: ProtecaModel.GeoSecteur; PortionIntegrite?: ProtecaModel.PortionIntegrite; });
    ClePortionSecteurs: number;
    CleSecteur: number;
    ClePortion: number;
    GeoSecteur: ProtecaModel.GeoSecteur;
    PortionIntegrite: ProtecaModel.PortionIntegrite;
    
  }
  
  export class PortionIntegrite extends $data.Entity {
    constructor();
    constructor(initData: { ClePortion?: number; CleEnsElectrique?: number; CleRevetement?: number; CleDiametre?: number; CleCommuneDepart?: number; CleCommuneArrivee?: number; Code?: string; Libelle?: string; CodeGmao?: string; DateMiseEnService?: Date; DatePose?: Date; Commentaire?: string; DateMajCommentaire?: Date; Longueur?: string; Idtroncon?: number; Supprime?: boolean; Branchement?: boolean; Compositions?: ProtecaModel.Composition[]; EnsembleElectrique?: ProtecaModel.EnsembleElectrique; LogOuvrage?: ProtecaModel.LogOuvrage[]; MesNiveauProtection?: ProtecaModel.MesNiveauProtection[]; PiSecteurs?: ProtecaModel.PiSecteurs[]; RefCommune?: ProtecaModel.RefCommune; RefCommune1?: ProtecaModel.RefCommune; RefDiametre?: ProtecaModel.RefDiametre; RefRevetement?: ProtecaModel.RefRevetement; Pps?: ProtecaModel.Pp[]; PortionIntegriteAnAction?: ProtecaModel.PortionIntegriteAnAction[]; });
    ClePortion: number;
    CleEnsElectrique: number;
    CleRevetement: number;
    CleDiametre: number;
    CleCommuneDepart: number;
    CleCommuneArrivee: number;
    Code: string;
    Libelle: string;
    CodeGmao: string;
    DateMiseEnService: Date;
    DatePose: Date;
    Commentaire: string;
    DateMajCommentaire: Date;
    Longueur: string;
    Idtroncon: number;
    Supprime: boolean;
    Branchement: boolean;
    Compositions: ProtecaModel.Composition[];
    EnsembleElectrique: ProtecaModel.EnsembleElectrique;
    LogOuvrage: ProtecaModel.LogOuvrage[];
    MesNiveauProtection: ProtecaModel.MesNiveauProtection[];
    PiSecteurs: ProtecaModel.PiSecteurs[];
    RefCommune: ProtecaModel.RefCommune;
    RefCommune1: ProtecaModel.RefCommune;
    RefDiametre: ProtecaModel.RefDiametre;
    RefRevetement: ProtecaModel.RefRevetement;
    Pps: ProtecaModel.Pp[];
    PortionIntegriteAnAction: ProtecaModel.PortionIntegriteAnAction[];
    
  }
  
  export class Pp extends $data.Entity {
    constructor();
    constructor(initData: { ClePp?: number; CleCommune?: number; CleNiveauSensibilite?: number; CleCategoriePp?: number; ClePpOrigine?: number; EnumSurfaceTme?: number; CleUtilisateur?: number; EnumSurfaceTms?: number; EnumDureeEnrg?: number; CleSecteur?: number; EnumPolarisation?: number; ClePortion?: number; Libelle?: string; Pk?: string; Commentaire?: string; DateMajCommentaire?: Date; PositionnementPostal?: string; CommentairePositionnement?: string; CourantsVagabonds?: boolean; CourantsAlternatifsInduits?: boolean; ElectrodeEnterreeAmovible?: boolean; TemoinEnterreAmovible?: boolean; TemoinMetalliqueDeSurface?: boolean; PositionGpsLat?: string; PositionGpsLong?: string; CoordonneeGpsFiabilisee?: boolean; DateMiseEnService?: Date; PresenceDUneTelemesure?: boolean; DateMiseEnServiceTelemesure?: Date; PpPoste?: boolean; Supprime?: boolean; DateMajPp?: Date; CleUtiDdeDeverrouillage?: number; DdeDeverrouillageCoordGps?: boolean; DateDdeDeverrouillageCoordGps?: Date; CategoriePp?: ProtecaModel.CategoriePp; Compositions?: ProtecaModel.Composition[]; EqEquipement?: ProtecaModel.EqEquipement[]; EqEquipementTmp?: ProtecaModel.EqEquipementTmp[]; EqFourreauMetallique?: ProtecaModel.EqFourreauMetallique[]; EqLiaisonInterne?: ProtecaModel.EqLiaisonInterne[]; EqRaccordIsolant?: ProtecaModel.EqRaccordIsolant[]; GeoSecteur?: ProtecaModel.GeoSecteur; Images?: ProtecaModel.Image[]; LogOuvrage?: ProtecaModel.LogOuvrage[]; MesNiveauProtection?: ProtecaModel.MesNiveauProtection[]; PortionIntegrite?: ProtecaModel.PortionIntegrite; RefCommune?: ProtecaModel.RefCommune; RefEnumValeur?: ProtecaModel.RefEnumValeur; PpJumelee?: ProtecaModel.PpJumelee[]; PpJumelee1?: ProtecaModel.PpJumelee[]; RefEnumValeur1?: ProtecaModel.RefEnumValeur; Pp1?: ProtecaModel.Pp[]; Pp2?: ProtecaModel.Pp; UsrUtilisateur?: ProtecaModel.UsrUtilisateur; RefEnumValeur2?: ProtecaModel.RefEnumValeur; RefEnumValeur3?: ProtecaModel.RefEnumValeur; RefNiveauSensibilitePp?: ProtecaModel.RefNiveauSensibilitePp; UsrUtilisateur1?: ProtecaModel.UsrUtilisateur; Visites?: ProtecaModel.Visite[]; PpTmp?: ProtecaModel.PpTmp[]; });
    ClePp: number;
    CleCommune: number;
    CleNiveauSensibilite: number;
    CleCategoriePp: number;
    ClePpOrigine: number;
    EnumSurfaceTme: number;
    CleUtilisateur: number;
    EnumSurfaceTms: number;
    EnumDureeEnrg: number;
    CleSecteur: number;
    EnumPolarisation: number;
    ClePortion: number;
    Libelle: string;
    Pk: string;
    Commentaire: string;
    DateMajCommentaire: Date;
    PositionnementPostal: string;
    CommentairePositionnement: string;
    CourantsVagabonds: boolean;
    CourantsAlternatifsInduits: boolean;
    ElectrodeEnterreeAmovible: boolean;
    TemoinEnterreAmovible: boolean;
    TemoinMetalliqueDeSurface: boolean;
    PositionGpsLat: string;
    PositionGpsLong: string;
    CoordonneeGpsFiabilisee: boolean;
    DateMiseEnService: Date;
    PresenceDUneTelemesure: boolean;
    DateMiseEnServiceTelemesure: Date;
    PpPoste: boolean;
    Supprime: boolean;
    DateMajPp: Date;
    CleUtiDdeDeverrouillage: number;
    DdeDeverrouillageCoordGps: boolean;
    DateDdeDeverrouillageCoordGps: Date;
    CategoriePp: ProtecaModel.CategoriePp;
    Compositions: ProtecaModel.Composition[];
    EqEquipement: ProtecaModel.EqEquipement[];
    EqEquipementTmp: ProtecaModel.EqEquipementTmp[];
    EqFourreauMetallique: ProtecaModel.EqFourreauMetallique[];
    EqLiaisonInterne: ProtecaModel.EqLiaisonInterne[];
    EqRaccordIsolant: ProtecaModel.EqRaccordIsolant[];
    GeoSecteur: ProtecaModel.GeoSecteur;
    Images: ProtecaModel.Image[];
    LogOuvrage: ProtecaModel.LogOuvrage[];
    MesNiveauProtection: ProtecaModel.MesNiveauProtection[];
    PortionIntegrite: ProtecaModel.PortionIntegrite;
    RefCommune: ProtecaModel.RefCommune;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    PpJumelee: ProtecaModel.PpJumelee[];
    PpJumelee1: ProtecaModel.PpJumelee[];
    RefEnumValeur1: ProtecaModel.RefEnumValeur;
    Pp1: ProtecaModel.Pp[];
    Pp2: ProtecaModel.Pp;
    UsrUtilisateur: ProtecaModel.UsrUtilisateur;
    RefEnumValeur2: ProtecaModel.RefEnumValeur;
    RefEnumValeur3: ProtecaModel.RefEnumValeur;
    RefNiveauSensibilitePp: ProtecaModel.RefNiveauSensibilitePp;
    UsrUtilisateur1: ProtecaModel.UsrUtilisateur;
    Visites: ProtecaModel.Visite[];
    PpTmp: ProtecaModel.PpTmp[];
    
  }
  
  export class PpJumelee extends $data.Entity {
    constructor();
    constructor(initData: { ClePpJumelee?: number; PpClePp?: number; ClePp?: number; Pp?: ProtecaModel.Pp; Pp1?: ProtecaModel.Pp; });
    ClePpJumelee: number;
    PpClePp: number;
    ClePp: number;
    Pp: ProtecaModel.Pp;
    Pp1: ProtecaModel.Pp;
    
  }
  
  export class RefCommune extends $data.Entity {
    constructor();
    constructor(initData: { CleCommune?: number; Libelle?: string; LibelleMajuscule?: string; CodeDepartement?: string; CodeCommune?: string; Idmicado?: number; CodeInsee?: string; HistoPp?: ProtecaModel.HistoPp[]; PortionIntegrite?: ProtecaModel.PortionIntegrite[]; PortionIntegrite1?: ProtecaModel.PortionIntegrite[]; Pps?: ProtecaModel.Pp[]; });
    CleCommune: number;
    Libelle: string;
    LibelleMajuscule: string;
    CodeDepartement: string;
    CodeCommune: string;
    Idmicado: number;
    CodeInsee: string;
    HistoPp: ProtecaModel.HistoPp[];
    PortionIntegrite: ProtecaModel.PortionIntegrite[];
    PortionIntegrite1: ProtecaModel.PortionIntegrite[];
    Pps: ProtecaModel.Pp[];
    
  }
  
  export class RefDiametre extends $data.Entity {
    constructor();
    constructor(initData: { CleDiametre?: number; Libelle?: string; Code?: string; Idmicado?: number; PortionIntegrite?: ProtecaModel.PortionIntegrite[]; });
    CleDiametre: number;
    Libelle: string;
    Code: string;
    Idmicado: number;
    PortionIntegrite: ProtecaModel.PortionIntegrite[];
    
  }
  
  export class RefEnumValeur extends $data.Entity {
    constructor();
    constructor(initData: { CleEnumValeur?: number; Libelle?: string; LibelleCourt?: string; NumeroOrdre?: number; CodeGroupe?: string; Valeur?: string; AnAction?: ProtecaModel.AnAction[]; AnAnalyse?: ProtecaModel.AnAnalyse[]; Compositions?: ProtecaModel.Composition[]; EnsembleElectrique?: ProtecaModel.EnsembleElectrique[]; EnsembleElectrique1?: ProtecaModel.EnsembleElectrique[]; EqPile?: ProtecaModel.EqPile[]; EqRaccordIsolant?: ProtecaModel.EqRaccordIsolant[]; EqRaccordIsolant1?: ProtecaModel.EqRaccordIsolant[]; HistoAdmin?: ProtecaModel.HistoAdmin[]; HistoEqPile?: ProtecaModel.HistoEqPile[]; HistoEqRaccordIsolant?: ProtecaModel.HistoEqRaccordIsolant[]; HistoEqRaccordIsolant1?: ProtecaModel.HistoEqRaccordIsolant[]; HistoPp?: ProtecaModel.HistoPp[]; HistoPp1?: ProtecaModel.HistoPp[]; HistoPp2?: ProtecaModel.HistoPp[]; HistoPp3?: ProtecaModel.HistoPp[]; Images?: ProtecaModel.Image[]; LogOuvrage?: ProtecaModel.LogOuvrage[]; MesCoutMesure?: ProtecaModel.MesCoutMesure[]; MesCoutMesure1?: ProtecaModel.MesCoutMesure[]; MesCoutMesure2?: ProtecaModel.MesCoutMesure[]; MesModeleMesure?: ProtecaModel.MesModeleMesure[]; MesTypeMesure?: ProtecaModel.MesTypeMesure[]; MesTypeMesure1?: ProtecaModel.MesTypeMesure[]; MesUnite?: ProtecaModel.MesUnite[]; ParametreAction?: ProtecaModel.ParametreAction[]; ParametreAction1?: ProtecaModel.ParametreAction[]; ParametreAction2?: ProtecaModel.ParametreAction[]; ParametreAction3?: ProtecaModel.ParametreAction[]; Pps?: ProtecaModel.Pp[]; Pps1?: ProtecaModel.Pp[]; Pps2?: ProtecaModel.Pp[]; Pps3?: ProtecaModel.Pp[]; RefNiveauSensibilitePp?: ProtecaModel.RefNiveauSensibilitePp[]; LogTournee?: ProtecaModel.LogTournee[]; Alertes?: ProtecaModel.Alerte[]; Visites?: ProtecaModel.Visite[]; PpTmp?: ProtecaModel.PpTmp[]; PpTmp1?: ProtecaModel.PpTmp[]; PpTmp2?: ProtecaModel.PpTmp[]; PpTmp3?: ProtecaModel.PpTmp[]; Visites1?: ProtecaModel.Visite[]; AnAction1?: ProtecaModel.AnAction[]; AnAction2?: ProtecaModel.AnAction[]; });
    CleEnumValeur: number;
    Libelle: string;
    LibelleCourt: string;
    NumeroOrdre: number;
    CodeGroupe: string;
    Valeur: string;
    AnAction: ProtecaModel.AnAction[];
    AnAnalyse: ProtecaModel.AnAnalyse[];
    Compositions: ProtecaModel.Composition[];
    EnsembleElectrique: ProtecaModel.EnsembleElectrique[];
    EnsembleElectrique1: ProtecaModel.EnsembleElectrique[];
    EqPile: ProtecaModel.EqPile[];
    EqRaccordIsolant: ProtecaModel.EqRaccordIsolant[];
    EqRaccordIsolant1: ProtecaModel.EqRaccordIsolant[];
    HistoAdmin: ProtecaModel.HistoAdmin[];
    HistoEqPile: ProtecaModel.HistoEqPile[];
    HistoEqRaccordIsolant: ProtecaModel.HistoEqRaccordIsolant[];
    HistoEqRaccordIsolant1: ProtecaModel.HistoEqRaccordIsolant[];
    HistoPp: ProtecaModel.HistoPp[];
    HistoPp1: ProtecaModel.HistoPp[];
    HistoPp2: ProtecaModel.HistoPp[];
    HistoPp3: ProtecaModel.HistoPp[];
    Images: ProtecaModel.Image[];
    LogOuvrage: ProtecaModel.LogOuvrage[];
    MesCoutMesure: ProtecaModel.MesCoutMesure[];
    MesCoutMesure1: ProtecaModel.MesCoutMesure[];
    MesCoutMesure2: ProtecaModel.MesCoutMesure[];
    MesModeleMesure: ProtecaModel.MesModeleMesure[];
    MesTypeMesure: ProtecaModel.MesTypeMesure[];
    MesTypeMesure1: ProtecaModel.MesTypeMesure[];
    MesUnite: ProtecaModel.MesUnite[];
    ParametreAction: ProtecaModel.ParametreAction[];
    ParametreAction1: ProtecaModel.ParametreAction[];
    ParametreAction2: ProtecaModel.ParametreAction[];
    ParametreAction3: ProtecaModel.ParametreAction[];
    Pps: ProtecaModel.Pp[];
    Pps1: ProtecaModel.Pp[];
    Pps2: ProtecaModel.Pp[];
    Pps3: ProtecaModel.Pp[];
    RefNiveauSensibilitePp: ProtecaModel.RefNiveauSensibilitePp[];
    LogTournee: ProtecaModel.LogTournee[];
    Alertes: ProtecaModel.Alerte[];
    Visites: ProtecaModel.Visite[];
    PpTmp: ProtecaModel.PpTmp[];
    PpTmp1: ProtecaModel.PpTmp[];
    PpTmp2: ProtecaModel.PpTmp[];
    PpTmp3: ProtecaModel.PpTmp[];
    Visites1: ProtecaModel.Visite[];
    AnAction1: ProtecaModel.AnAction[];
    AnAction2: ProtecaModel.AnAction[];
    
  }
  
  export class RefNiveauSensibilitePp extends $data.Entity {
    constructor();
    constructor(initData: { CleNiveauSensibilite?: number; EnumTypeEval?: number; Libelle?: string; TypeSensibilite?: number; CategoriePp?: ProtecaModel.CategoriePp[]; HistoPp?: ProtecaModel.HistoPp[]; Pps?: ProtecaModel.Pp[]; RefEnumValeur?: ProtecaModel.RefEnumValeur; PpTmp?: ProtecaModel.PpTmp[]; });
    CleNiveauSensibilite: number;
    EnumTypeEval: number;
    Libelle: string;
    TypeSensibilite: number;
    CategoriePp: ProtecaModel.CategoriePp[];
    HistoPp: ProtecaModel.HistoPp[];
    Pps: ProtecaModel.Pp[];
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    PpTmp: ProtecaModel.PpTmp[];
    
  }
  
  export class RefRevetement extends $data.Entity {
    constructor();
    constructor(initData: { CleRevetement?: number; Libelle?: string; Code?: string; Idmicado?: number; PortionIntegrite?: ProtecaModel.PortionIntegrite[]; });
    CleRevetement: number;
    Libelle: string;
    Code: string;
    Idmicado: number;
    PortionIntegrite: ProtecaModel.PortionIntegrite[];
    
  }
  
  export class RefSousTypeOuvrage extends $data.Entity {
    constructor();
    constructor(initData: { CleSousTypeOuvrage?: number; Libelle?: string; NumeroOrdre?: number; CodeGroupe?: string; Valeur?: string; EqAnodeGalvanique?: ProtecaModel.EqAnodeGalvanique[]; EqDispoEcoulementCourantsAlternatifs?: ProtecaModel.EqDispoEcoulementCourantsAlternatifs[]; EqDrainage?: ProtecaModel.EqDrainage[]; EqLiaisonExterne?: ProtecaModel.EqLiaisonExterne[]; EqLiaisonExterne1?: ProtecaModel.EqLiaisonExterne[]; EqLiaisonInterne?: ProtecaModel.EqLiaisonInterne[]; EqPile?: ProtecaModel.EqPile[]; EqRaccordIsolant?: ProtecaModel.EqRaccordIsolant[]; EqRaccordIsolant1?: ProtecaModel.EqRaccordIsolant[]; EqSoutirage?: ProtecaModel.EqSoutirage[]; EqSoutirage1?: ProtecaModel.EqSoutirage[]; HistoEqAnodeGalvanique?: ProtecaModel.HistoEqAnodeGalvanique[]; HistoEqDispoEcoulementCourantsAlternatifs?: ProtecaModel.HistoEqDispoEcoulementCourantsAlternatifs[]; HistoEqDrainage?: ProtecaModel.HistoEqDrainage[]; HistoEqLiaisonExterne?: ProtecaModel.HistoEqLiaisonExterne[]; HistoEqLiaisonInterne?: ProtecaModel.HistoEqLiaisonInterne[]; HistoEqPile?: ProtecaModel.HistoEqPile[]; HistoEqRaccordIsolant?: ProtecaModel.HistoEqRaccordIsolant[]; HistoEqRaccordIsolant1?: ProtecaModel.HistoEqRaccordIsolant[]; HistoEqSoutirage?: ProtecaModel.HistoEqSoutirage[]; });
    CleSousTypeOuvrage: number;
    Libelle: string;
    NumeroOrdre: number;
    CodeGroupe: string;
    Valeur: string;
    EqAnodeGalvanique: ProtecaModel.EqAnodeGalvanique[];
    EqDispoEcoulementCourantsAlternatifs: ProtecaModel.EqDispoEcoulementCourantsAlternatifs[];
    EqDrainage: ProtecaModel.EqDrainage[];
    EqLiaisonExterne: ProtecaModel.EqLiaisonExterne[];
    EqLiaisonExterne1: ProtecaModel.EqLiaisonExterne[];
    EqLiaisonInterne: ProtecaModel.EqLiaisonInterne[];
    EqPile: ProtecaModel.EqPile[];
    EqRaccordIsolant: ProtecaModel.EqRaccordIsolant[];
    EqRaccordIsolant1: ProtecaModel.EqRaccordIsolant[];
    EqSoutirage: ProtecaModel.EqSoutirage[];
    EqSoutirage1: ProtecaModel.EqSoutirage[];
    HistoEqAnodeGalvanique: ProtecaModel.HistoEqAnodeGalvanique[];
    HistoEqDispoEcoulementCourantsAlternatifs: ProtecaModel.HistoEqDispoEcoulementCourantsAlternatifs[];
    HistoEqDrainage: ProtecaModel.HistoEqDrainage[];
    HistoEqLiaisonExterne: ProtecaModel.HistoEqLiaisonExterne[];
    HistoEqLiaisonInterne: ProtecaModel.HistoEqLiaisonInterne[];
    HistoEqPile: ProtecaModel.HistoEqPile[];
    HistoEqRaccordIsolant: ProtecaModel.HistoEqRaccordIsolant[];
    HistoEqRaccordIsolant1: ProtecaModel.HistoEqRaccordIsolant[];
    HistoEqSoutirage: ProtecaModel.HistoEqSoutirage[];
    
  }
  
  export class RefUsrAutorisation extends $data.Entity {
    constructor();
    constructor(initData: { CleAutorisation?: number; CleGroupe?: number; LibelleAutorisation?: string; CodeAutorisation?: string; TypePortee?: string; RefUsrGroupe?: ProtecaModel.RefUsrGroupe; UsrRole?: ProtecaModel.UsrRole[]; });
    CleAutorisation: number;
    CleGroupe: number;
    LibelleAutorisation: string;
    CodeAutorisation: string;
    TypePortee: string;
    RefUsrGroupe: ProtecaModel.RefUsrGroupe;
    UsrRole: ProtecaModel.UsrRole[];
    
  }
  
  export class RefUsrGroupe extends $data.Entity {
    constructor();
    constructor(initData: { CleGroupe?: number; LibelleGroupe?: string; RefUsrAutorisation?: ProtecaModel.RefUsrAutorisation[]; });
    CleGroupe: number;
    LibelleGroupe: string;
    RefUsrAutorisation: ProtecaModel.RefUsrAutorisation[];
    
  }
  
  export class RefUsrPortee extends $data.Entity {
    constructor();
    constructor(initData: { ClePortee?: number; CodePortee?: string; LibellePortee?: string; TypePortee?: string; UsrProfil?: ProtecaModel.UsrProfil[]; UsrRole?: ProtecaModel.UsrRole[]; UsrUtilisateur?: ProtecaModel.UsrUtilisateur[]; });
    ClePortee: number;
    CodePortee: string;
    LibellePortee: string;
    TypePortee: string;
    UsrProfil: ProtecaModel.UsrProfil[];
    UsrRole: ProtecaModel.UsrRole[];
    UsrUtilisateur: ProtecaModel.UsrUtilisateur[];
    
  }
  
  export class Tournee extends $data.Entity {
    constructor();
    constructor(initData: { CleTournee?: number; CleUtilisateur?: number; Libelle?: string; CodeTournee?: string; Commentaire?: string; DateCreation?: Date; Numero?: number; Supprime?: boolean; Verrouille?: boolean; Compositions?: ProtecaModel.Composition[]; UsrUtilisateur?: ProtecaModel.UsrUtilisateur; LogTournee?: ProtecaModel.LogTournee[]; });
    CleTournee: number;
    CleUtilisateur: number;
    Libelle: string;
    CodeTournee: string;
    Commentaire: string;
    DateCreation: Date;
    Numero: number;
    Supprime: boolean;
    Verrouille: boolean;
    Compositions: ProtecaModel.Composition[];
    UsrUtilisateur: ProtecaModel.UsrUtilisateur;
    LogTournee: ProtecaModel.LogTournee[];
    
  }
  
  export class TypeEquipement extends $data.Entity {
    constructor();
    constructor(initData: { CleTypeEq?: number; Libelle?: string; CodeEquipement?: string; NumeroOrdre?: number; CategoriePp?: ProtecaModel.CategoriePp[]; EqEquipement?: ProtecaModel.EqEquipement[]; EqEquipementTmp?: ProtecaModel.EqEquipementTmp[]; HistoEquipement?: ProtecaModel.HistoEquipement[]; MesCoutMesure?: ProtecaModel.MesCoutMesure[]; MesModeleMesure?: ProtecaModel.MesModeleMesure[]; });
    CleTypeEq: number;
    Libelle: string;
    CodeEquipement: string;
    NumeroOrdre: number;
    CategoriePp: ProtecaModel.CategoriePp[];
    EqEquipement: ProtecaModel.EqEquipement[];
    EqEquipementTmp: ProtecaModel.EqEquipementTmp[];
    HistoEquipement: ProtecaModel.HistoEquipement[];
    MesCoutMesure: ProtecaModel.MesCoutMesure[];
    MesModeleMesure: ProtecaModel.MesModeleMesure[];
    
  }
  
  export class UsrProfil extends $data.Entity {
    constructor();
    constructor(initData: { CleProfil?: number; ClePortee?: number; LibelleProfil?: string; Editable?: boolean; ProfilAdmin?: boolean; RefUsrPortee?: ProtecaModel.RefUsrPortee; UsrRole?: ProtecaModel.UsrRole[]; UsrUtilisateur?: ProtecaModel.UsrUtilisateur[]; });
    CleProfil: number;
    ClePortee: number;
    LibelleProfil: string;
    Editable: boolean;
    ProfilAdmin: boolean;
    RefUsrPortee: ProtecaModel.RefUsrPortee;
    UsrRole: ProtecaModel.UsrRole[];
    UsrUtilisateur: ProtecaModel.UsrUtilisateur[];
    
  }
  
  export class UsrRole extends $data.Entity {
    constructor();
    constructor(initData: { CleRole?: number; CleAutorisation?: number; CleProfil?: number; ClePortee?: number; RefUsrAutorisation?: ProtecaModel.RefUsrAutorisation; RefUsrPortee?: ProtecaModel.RefUsrPortee; UsrProfil?: ProtecaModel.UsrProfil; });
    CleRole: number;
    CleAutorisation: number;
    CleProfil: number;
    ClePortee: number;
    RefUsrAutorisation: ProtecaModel.RefUsrAutorisation;
    RefUsrPortee: ProtecaModel.RefUsrPortee;
    UsrProfil: ProtecaModel.UsrProfil;
    
  }
  
  export class UsrUtilisateur extends $data.Entity {
    constructor();
    constructor(initData: { CleUtilisateur?: number; CleSecteur?: number; GestionDesComptes?: number; CleAgence?: number; CleProfil?: number; Nom?: string; Prenom?: string; Identifiant?: string; Mail?: string; Societe?: string; Supprime?: boolean; Externe?: boolean; EstPresta?: boolean; AnAction?: ProtecaModel.AnAction[]; AnAction1?: ProtecaModel.AnAction[]; AnAnalyse?: ProtecaModel.AnAnalyse[]; EqEquipement?: ProtecaModel.EqEquipement[]; GeoAgence?: ProtecaModel.GeoAgence; GeoSecteur?: ProtecaModel.GeoSecteur; LogOuvrage?: ProtecaModel.LogOuvrage[]; Pps?: ProtecaModel.Pp[]; RefUsrPortee?: ProtecaModel.RefUsrPortee; Tournees?: ProtecaModel.Tournee[]; UsrProfil?: ProtecaModel.UsrProfil; LogTournee?: ProtecaModel.LogTournee[]; Pps1?: ProtecaModel.Pp[]; Visites?: ProtecaModel.Visite[]; Visites1?: ProtecaModel.Visite[]; Visites2?: ProtecaModel.Visite[]; Visites3?: ProtecaModel.Visite[]; PpTmp?: ProtecaModel.PpTmp[]; });
    CleUtilisateur: number;
    CleSecteur: number;
    GestionDesComptes: number;
    CleAgence: number;
    CleProfil: number;
    Nom: string;
    Prenom: string;
    Identifiant: string;
    Mail: string;
    Societe: string;
    Supprime: boolean;
    Externe: boolean;
    EstPresta: boolean;
    AnAction: ProtecaModel.AnAction[];
    AnAction1: ProtecaModel.AnAction[];
    AnAnalyse: ProtecaModel.AnAnalyse[];
    EqEquipement: ProtecaModel.EqEquipement[];
    GeoAgence: ProtecaModel.GeoAgence;
    GeoSecteur: ProtecaModel.GeoSecteur;
    LogOuvrage: ProtecaModel.LogOuvrage[];
    Pps: ProtecaModel.Pp[];
    RefUsrPortee: ProtecaModel.RefUsrPortee;
    Tournees: ProtecaModel.Tournee[];
    UsrProfil: ProtecaModel.UsrProfil;
    LogTournee: ProtecaModel.LogTournee[];
    Pps1: ProtecaModel.Pp[];
    Visites: ProtecaModel.Visite[];
    Visites1: ProtecaModel.Visite[];
    Visites2: ProtecaModel.Visite[];
    Visites3: ProtecaModel.Visite[];
    PpTmp: ProtecaModel.PpTmp[];
    
  }
  
  export class LogTournee extends $data.Entity {
    constructor();
    constructor(initData: { CleLogTournee?: number; CleTournee?: number; CleUtilisateur?: number; EnumTypeModification?: number; ListeChamps?: string; DateHistorisation?: Date; Tournee?: ProtecaModel.Tournee; RefEnumValeur?: ProtecaModel.RefEnumValeur; UsrUtilisateur?: ProtecaModel.UsrUtilisateur; });
    CleLogTournee: number;
    CleTournee: number;
    CleUtilisateur: number;
    EnumTypeModification: number;
    ListeChamps: string;
    DateHistorisation: Date;
    Tournee: ProtecaModel.Tournee;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    UsrUtilisateur: ProtecaModel.UsrUtilisateur;
    
  }
  
  export class Alerte extends $data.Entity {
    constructor();
    constructor(initData: { CleAlerte?: number; CleVisite?: number; CleMesure?: number; EnumTypeAlerte?: number; CleAnalyse?: number; Date?: Date; Supprime?: boolean; AnAnalyseSerieMesure?: ProtecaModel.AnAnalyseSerieMesure; MesMesure?: ProtecaModel.MesMesure; Visite?: ProtecaModel.Visite; RefEnumValeur?: ProtecaModel.RefEnumValeur; });
    CleAlerte: number;
    CleVisite: number;
    CleMesure: number;
    EnumTypeAlerte: number;
    CleAnalyse: number;
    Date: Date;
    Supprime: boolean;
    AnAnalyseSerieMesure: ProtecaModel.AnAnalyseSerieMesure;
    MesMesure: ProtecaModel.MesMesure;
    Visite: ProtecaModel.Visite;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    
  }
  
  export class MesMesure extends $data.Entity {
    constructor();
    constructor(initData: { CleMesure?: number; CleTypeMesure?: number; CleVisite?: number; Valeur?: string; Alertes?: ProtecaModel.Alerte[]; MesTypeMesure?: ProtecaModel.MesTypeMesure; Visite?: ProtecaModel.Visite; });
    CleMesure: number;
    CleTypeMesure: number;
    CleVisite: number;
    Valeur: string;
    Alertes: ProtecaModel.Alerte[];
    MesTypeMesure: ProtecaModel.MesTypeMesure;
    Visite: ProtecaModel.Visite;
    
  }
  
  export class Visite extends $data.Entity {
    constructor();
    constructor(initData: { CleVisite?: number; CleUtilisateurCreation?: number; CleUtilisateurImport?: number; CleUtilisateurMesure?: number; CleEqTmp?: number; CleUtilisateurValidation?: number; EnumTypeEval?: number; ClePp?: number; CleEquipement?: number; DateVisite?: Date; DateSaisie?: Date; DateImport?: Date; DateValidation?: Date; EstValidee?: boolean; Commentaire?: string; RelevePartiel?: boolean; Telemesure?: boolean; ClePpTmp?: number; EnumTypeEvalComposition?: number; EnumConformiteTournee?: number; Alertes?: ProtecaModel.Alerte[]; AnAnalyseSerieMesure?: ProtecaModel.AnAnalyseSerieMesure[]; EqEquipement?: ProtecaModel.EqEquipement; EqEquipementTmp?: ProtecaModel.EqEquipementTmp; InstrumentsUtilises?: ProtecaModel.InstrumentsUtilises[]; MesMesure?: ProtecaModel.MesMesure[]; Pp?: ProtecaModel.Pp; RefEnumValeur?: ProtecaModel.RefEnumValeur; UsrUtilisateur?: ProtecaModel.UsrUtilisateur; UsrUtilisateur1?: ProtecaModel.UsrUtilisateur; UsrUtilisateur2?: ProtecaModel.UsrUtilisateur; UsrUtilisateur3?: ProtecaModel.UsrUtilisateur; AnAnalyseEeVisite?: ProtecaModel.AnAnalyseEeVisite[]; PpTmp?: ProtecaModel.PpTmp; RefEnumValeur1?: ProtecaModel.RefEnumValeur; });
    CleVisite: number;
    CleUtilisateurCreation: number;
    CleUtilisateurImport: number;
    CleUtilisateurMesure: number;
    CleEqTmp: number;
    CleUtilisateurValidation: number;
    EnumTypeEval: number;
    ClePp: number;
    CleEquipement: number;
    DateVisite: Date;
    DateSaisie: Date;
    DateImport: Date;
    DateValidation: Date;
    EstValidee: boolean;
    Commentaire: string;
    RelevePartiel: boolean;
    Telemesure: boolean;
    ClePpTmp: number;
    EnumTypeEvalComposition: number;
    EnumConformiteTournee: number;
    Alertes: ProtecaModel.Alerte[];
    AnAnalyseSerieMesure: ProtecaModel.AnAnalyseSerieMesure[];
    EqEquipement: ProtecaModel.EqEquipement;
    EqEquipementTmp: ProtecaModel.EqEquipementTmp;
    InstrumentsUtilises: ProtecaModel.InstrumentsUtilises[];
    MesMesure: ProtecaModel.MesMesure[];
    Pp: ProtecaModel.Pp;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    UsrUtilisateur: ProtecaModel.UsrUtilisateur;
    UsrUtilisateur1: ProtecaModel.UsrUtilisateur;
    UsrUtilisateur2: ProtecaModel.UsrUtilisateur;
    UsrUtilisateur3: ProtecaModel.UsrUtilisateur;
    AnAnalyseEeVisite: ProtecaModel.AnAnalyseEeVisite[];
    PpTmp: ProtecaModel.PpTmp;
    RefEnumValeur1: ProtecaModel.RefEnumValeur;
    
  }
  
  export class AnAnalyseEeVisite extends $data.Entity {
    constructor();
    constructor(initData: { CleAnalyseEeVisite?: number; CleAnalyse?: number; CleVisite?: number; AnAnalyseEe?: ProtecaModel.AnAnalyseEe; Visite?: ProtecaModel.Visite; });
    CleAnalyseEeVisite: number;
    CleAnalyse: number;
    CleVisite: number;
    AnAnalyseEe: ProtecaModel.AnAnalyseEe;
    Visite: ProtecaModel.Visite;
    
  }
  
  export class PpTmp extends $data.Entity {
    constructor();
    constructor(initData: { CourantsVagabonds?: boolean; CourantsAlternatifsInduits?: boolean; ElectrodeEnterreeAmovible?: boolean; TemoinEnterreAmovible?: boolean; TemoinMetalliqueDeSurface?: boolean; PositionGpsLat?: string; PositionGpsLong?: string; CoordonneeGpsFiabilisee?: boolean; DdeDeverrouillageCoordGps?: boolean; DateDdeDeverrouillageCoordGps?: Date; PresenceDUneTelemesure?: boolean; ClePpTmp?: number; CleCategoriePp?: number; ClePp?: number; EnumPolarisation?: number; CleUtiDdeDeverrouillage?: number; EnumSurfaceTme?: number; EnumDureeEnrg?: number; CleNiveauSensibilite?: number; EnumSurfaceTms?: number; DateMajPp?: Date; CategoriePp?: ProtecaModel.CategoriePp; Pp?: ProtecaModel.Pp; RefEnumValeur?: ProtecaModel.RefEnumValeur; RefEnumValeur1?: ProtecaModel.RefEnumValeur; RefEnumValeur2?: ProtecaModel.RefEnumValeur; RefEnumValeur3?: ProtecaModel.RefEnumValeur; RefNiveauSensibilitePp?: ProtecaModel.RefNiveauSensibilitePp; UsrUtilisateur?: ProtecaModel.UsrUtilisateur; Visites?: ProtecaModel.Visite[]; });
    CourantsVagabonds: boolean;
    CourantsAlternatifsInduits: boolean;
    ElectrodeEnterreeAmovible: boolean;
    TemoinEnterreAmovible: boolean;
    TemoinMetalliqueDeSurface: boolean;
    PositionGpsLat: string;
    PositionGpsLong: string;
    CoordonneeGpsFiabilisee: boolean;
    DdeDeverrouillageCoordGps: boolean;
    DateDdeDeverrouillageCoordGps: Date;
    PresenceDUneTelemesure: boolean;
    ClePpTmp: number;
    CleCategoriePp: number;
    ClePp: number;
    EnumPolarisation: number;
    CleUtiDdeDeverrouillage: number;
    EnumSurfaceTme: number;
    EnumDureeEnrg: number;
    CleNiveauSensibilite: number;
    EnumSurfaceTms: number;
    DateMajPp: Date;
    CategoriePp: ProtecaModel.CategoriePp;
    Pp: ProtecaModel.Pp;
    RefEnumValeur: ProtecaModel.RefEnumValeur;
    RefEnumValeur1: ProtecaModel.RefEnumValeur;
    RefEnumValeur2: ProtecaModel.RefEnumValeur;
    RefEnumValeur3: ProtecaModel.RefEnumValeur;
    RefNiveauSensibilitePp: ProtecaModel.RefNiveauSensibilitePp;
    UsrUtilisateur: ProtecaModel.UsrUtilisateur;
    Visites: ProtecaModel.Visite[];
    
  }
  
  export class PortionIntegriteAnAction extends $data.Entity {
    constructor();
    constructor(initData: { Id?: number; CleAction?: number; ClePortion?: number; AnAction?: ProtecaModel.AnAction; PortionIntegrite?: ProtecaModel.PortionIntegrite; });
    Id: number;
    CleAction: number;
    ClePortion: number;
    AnAction: ProtecaModel.AnAction;
    PortionIntegrite: ProtecaModel.PortionIntegrite;
    
  }
  
}

declare module Proteca.Web.Models {
  export class ProtecaEntities extends $data.EntityContext {
    onReady(): $data.IPromise;
    onReady(handler: (context: ProtecaEntities) => void): $data.IPromise;
    
    RefParametre: $data.EntitySet<ProtecaModel.RefParametre>;
    GeoEnsembleElectrique: $data.EntitySet<ProtecaModel.GeoEnsembleElectrique>;
    PortionDates: $data.EntitySet<ProtecaModel.PortionDates>;
    PpEquipement: $data.EntitySet<ProtecaModel.PpEquipement>;
    TourneePpEq: $data.EntitySet<ProtecaModel.TourneePpEq>;
    AlerteDetail: $data.EntitySet<ProtecaModel.AlerteDetail>;
    GeoEnsElecPortion: $data.EntitySet<ProtecaModel.GeoEnsElecPortion>;
    GeoEnsElecPortionEqPp: $data.EntitySet<ProtecaModel.GeoEnsElecPortionEqPp>;
    AnAction: $data.EntitySet<ProtecaModel.AnAction>;
    AnAnalyse: $data.EntitySet<ProtecaModel.AnAnalyse>;
    CategoriePp: $data.EntitySet<ProtecaModel.CategoriePp>;
    Compositions: $data.EntitySet<ProtecaModel.Composition>;
    EnsembleElectrique: $data.EntitySet<ProtecaModel.EnsembleElectrique>;
    EqDrainageLiaisonsext: $data.EntitySet<ProtecaModel.EqDrainageLiaisonsext>;
    EqEquipement: $data.EntitySet<ProtecaModel.EqEquipement>;
    EqEquipementTmp: $data.EntitySet<ProtecaModel.EqEquipementTmp>;
    EqSoutirageLiaisonsext: $data.EntitySet<ProtecaModel.EqSoutirageLiaisonsext>;
    GeoAgence: $data.EntitySet<ProtecaModel.GeoAgence>;
    GeoRegion: $data.EntitySet<ProtecaModel.GeoRegion>;
    GeoSecteur: $data.EntitySet<ProtecaModel.GeoSecteur>;
    HistoAdmin: $data.EntitySet<ProtecaModel.HistoAdmin>;
    HistoEquipement: $data.EntitySet<ProtecaModel.HistoEquipement>;
    HistoPp: $data.EntitySet<ProtecaModel.HistoPp>;
    Images: $data.EntitySet<ProtecaModel.Image>;
    InsInstrument: $data.EntitySet<ProtecaModel.InsInstrument>;
    InstrumentsUtilises: $data.EntitySet<ProtecaModel.InstrumentsUtilises>;
    LogOuvrage: $data.EntitySet<ProtecaModel.LogOuvrage>;
    MesClassementMesure: $data.EntitySet<ProtecaModel.MesClassementMesure>;
    MesCoutMesure: $data.EntitySet<ProtecaModel.MesCoutMesure>;
    MesModeleMesure: $data.EntitySet<ProtecaModel.MesModeleMesure>;
    MesNiveauProtection: $data.EntitySet<ProtecaModel.MesNiveauProtection>;
    MesTypeMesure: $data.EntitySet<ProtecaModel.MesTypeMesure>;
    MesUnite: $data.EntitySet<ProtecaModel.MesUnite>;
    ParametreAction: $data.EntitySet<ProtecaModel.ParametreAction>;
    PiSecteurs: $data.EntitySet<ProtecaModel.PiSecteurs>;
    PortionIntegrite: $data.EntitySet<ProtecaModel.PortionIntegrite>;
    Pps: $data.EntitySet<ProtecaModel.Pp>;
    PpJumelee: $data.EntitySet<ProtecaModel.PpJumelee>;
    RefCommune: $data.EntitySet<ProtecaModel.RefCommune>;
    RefDiametre: $data.EntitySet<ProtecaModel.RefDiametre>;
    RefEnumValeur: $data.EntitySet<ProtecaModel.RefEnumValeur>;
    RefNiveauSensibilitePp: $data.EntitySet<ProtecaModel.RefNiveauSensibilitePp>;
    RefRevetement: $data.EntitySet<ProtecaModel.RefRevetement>;
    RefSousTypeOuvrage: $data.EntitySet<ProtecaModel.RefSousTypeOuvrage>;
    RefUsrAutorisation: $data.EntitySet<ProtecaModel.RefUsrAutorisation>;
    RefUsrGroupe: $data.EntitySet<ProtecaModel.RefUsrGroupe>;
    RefUsrPortee: $data.EntitySet<ProtecaModel.RefUsrPortee>;
    Tournees: $data.EntitySet<ProtecaModel.Tournee>;
    TypeEquipement: $data.EntitySet<ProtecaModel.TypeEquipement>;
    UsrProfil: $data.EntitySet<ProtecaModel.UsrProfil>;
    UsrRole: $data.EntitySet<ProtecaModel.UsrRole>;
    UsrUtilisateur: $data.EntitySet<ProtecaModel.UsrUtilisateur>;
    LogTournee: $data.EntitySet<ProtecaModel.LogTournee>;
    Alertes: $data.EntitySet<ProtecaModel.Alerte>;
    MesMesure: $data.EntitySet<ProtecaModel.MesMesure>;
    Visites: $data.EntitySet<ProtecaModel.Visite>;
    AnAnalyseEeVisite: $data.EntitySet<ProtecaModel.AnAnalyseEeVisite>;
    PpTmp: $data.EntitySet<ProtecaModel.PpTmp>;
    PortionIntegriteAnAction: $data.EntitySet<ProtecaModel.PortionIntegriteAnAction>;
    
  }

}
