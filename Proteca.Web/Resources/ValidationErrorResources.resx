<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DefaultCoordonneesLatFieldErrorMessage" xml:space="preserve">
    <value>Le format de la latitude n'est pas correct. La partie entière a un maximum de 2 chiffres et la partie décimale de 9 chiffres.</value>
  </data>
  <data name="DefaultCoordonneesLongFieldErrorMessage" xml:space="preserve">
    <value>Le format de la longitude n'est pas correct. La partie entière a un maximum de 2 chiffres et la partie décimale de 9 chiffres.</value>
  </data>
  <data name="DefaultDecimalFormatFieldErrorMessage" xml:space="preserve">
    <value>Le format n'est pas correct. La partie entière a un maximum de {0} chiffres et la partie décimale de {1} chiffres.</value>
  </data>
  <data name="DefaultEmailFieldErrorMessage" xml:space="preserve">
    <value>Adresse mail invalide (ex: p.nom@grtgaz.com)</value>
  </data>
  <data name="DefaultRequiredFieldErrorMessage" xml:space="preserve">
    <value>Ce champ est obligatoire.</value>
  </data>
  <data name="DefaultResistanceFieldErrorMessage" xml:space="preserve">
    <value>Le format de la valeur de la résistance n'est pas correcte. La partie entière a un maximum de 4 chiffres et la partie décimale de 1 chiffre.</value>
  </data>
  <data name="DefaultStringLengthFieldErrorMessage" xml:space="preserve">
    <value>Ce champ ne doit pas dépasser {1} caractères</value>
  </data>
  <data name="DefaultUniqueFieldErrorMessage" xml:space="preserve">
    <value>Cette valeur existe déjà. La valeur de ce champ doit être unique.</value>
  </data>
  <data name="DefaultValidationBoolFieldErrorMessage" xml:space="preserve">
    <value>La valeur saisie doit être un booléen</value>
  </data>
  <data name="DefaultValidationDoubleFieldErrorMessage" xml:space="preserve">
    <value>La valeur saisie doit être un réel</value>
  </data>
  <data name="DefaultValidationPositivIntFieldErrorMessage" xml:space="preserve">
    <value>La valeur saisie doit être un entier positif</value>
  </data>
  <data name="DefaultValidationRangeFieldErrorMessage" xml:space="preserve">
    <value>La valeur saisie doit être comprise entre {1} et {2}</value>
  </data>
  <data name="NiveauProtectionCompareSeuilErrorMessage" xml:space="preserve">
    <value>Le seuil mini doit être inférieur au seuil maxi.</value>
  </data>
  <data name="ParamGenValidationPositiveDoubleFieldErrorMessage" xml:space="preserve">
    <value>La valeur saisie doit être un réel compris entre 0.0 et 9999.999</value>
  </data>
  <data name="ParamGenValidationPositiveIntFieldErrorMessage" xml:space="preserve">
    <value>La valeur saisie doit être un entier compris entre 0 et 9999</value>
  </data>
  <data name="PPPKFormatError" xml:space="preserve">
    <value>Le format du point kilométrique n'est pas correct. La partie entière a un maximum de 5 chiffres et la partie décimale de 1 chiffre.</value>
  </data>
  <data name="SOIntensiteReglageFormatError" xml:space="preserve">
    <value>Le format de l'intensité de réglage n'est pas correct. La partie entière a un maximum de 2 chiffres et la partie décimale de 1 chiffre.</value>
  </data>
  <data name="SOLongueurDeversoirFormatError" xml:space="preserve">
    <value>Le format de la longueur du déversoir n'est pas correct. La partie entière a un maximum de 3 chiffres et la partie décimale de 2 chiffres.</value>
  </data>
  <data name="SOMasseMetreFormatError" xml:space="preserve">
    <value>Le format de la longueur de la masse linéaire n'est pas correct. La partie entière a un maximum de 2 chiffres et la partie décimale de 2 chiffres.</value>
  </data>
  <data name="ValidationErrorBadAnswerLength" xml:space="preserve">
    <value>The security answer cannot be more than 128 characters long</value>
  </data>
  <data name="ValidationErrorBadFriendlyNameLength" xml:space="preserve">
    <value>The friendly name cannot be more than 255 characters long</value>
  </data>
  <data name="ValidationErrorBadPasswordLength" xml:space="preserve">
    <value>Password must be at least 7 and at most 50 characters long</value>
  </data>
  <data name="ValidationErrorBadPasswordStrength" xml:space="preserve">
    <value>A password needs to contain at least one special character e.g. @ or #</value>
    <comment>Update this if you change your password strength requirements</comment>
  </data>
  <data name="ValidationErrorBadUserNameLength" xml:space="preserve">
    <value>The user name must be at least 4 and at most 255 characters long</value>
  </data>
  <data name="ValidationErrorDecimal" xml:space="preserve">
    <value />
  </data>
  <data name="ValidationErrorInvalidEmail" xml:space="preserve">
    <value>Invalid email. An email must use the format user@company.com</value>
  </data>
  <data name="ValidationErrorInvalidUserName" xml:space="preserve">
    <value>Invalid user name. It must contain only alphanumeric characters</value>
    <comment>Update this if you change your policy on username restrictions</comment>
  </data>
  <data name="ValidationErrorPasswordConfirmationMismatch" xml:space="preserve">
    <value>Passwords do not match</value>
  </data>
  <data name="ValidationPkFieldErrorMessage" xml:space="preserve">
    <value>La valeur saisie doit être positive et inférieure ou égale à la longueur de la portion ({0})</value>
  </data>
  <data name="ParametreActionCoutFormatError" xml:space="preserve">
    <value>Le format du cout n'est pas correct. La partie entière a un maximum de 6 chiffres et la partie décimale de 2 chiffres.</value>
  </data>
  <data name="ParamGenValidationDoubleFieldErrorMessage" xml:space="preserve">
    <value>La valeur saisie doit être un réel compris entre -9999.999 et 9999.999</value>
  </data>
  <data name="DefaultValidationDecimalFieldErrorMessage" xml:space="preserve">
    <value>La valeur saisie doit être un réel avec maximum {0} décimale{1}</value>
  </data>
  <data name="DefaultValidationIntFieldErrorMessage" xml:space="preserve">
    <value>La valeur saisie doit être un entier</value>
  </data>
  <data name="DefaultValidationNoUnitFieldErrorMessage" xml:space="preserve">
    <value>Aucune unité n'a été indiquée pour valider ce champ.</value>
  </data>
  <data name="DeleteStateError" xml:space="preserve">
    <value>L'équipement sélectionnée est supprimée. Veuillez sélectionner un équipement valide.</value>
  </data>
  <data name="ValidationErrorDateIntervalle" xml:space="preserve">
    <value>La valeur saisie doit être un entier compris entre {0} et {1}</value>
  </data>
  <data name="DefaultPositiveInt" xml:space="preserve">
    <value>La valeur saisie doit être supérieure à 0 dans le cadre d'un réel</value>
  </data>
  <data name="StringLengthFieldErrorMessage" xml:space="preserve">
    <value>Ce champ doit contenir entre {2} et {1} caractères</value>
  </data>
  <data name="DefaultPositiveValue" xml:space="preserve">
    <value>La valeur saisie ne doit pas être négative</value>
  </data>
  <data name="DefaultValidationPositivFieldErrorMessage" xml:space="preserve">
    <value>La valeur saisie doit être un nombre positif</value>
  </data>
  <data name="ValidationErrorDateInf" xml:space="preserve">
    <value>La date saisie doit être inférieure à la date suivante : {0}</value>
  </data>
  <data name="ValidationErrorDateSup" xml:space="preserve">
    <value>La date saisie doit être supérieure à la date suivante : {0}</value>
  </data>
  <data name="ValidationErrorDateSupOrEquals" xml:space="preserve">
    <value>La date saisie doit être supérieure ou égale à la date suivante : {0}</value>
  </data>
</root>